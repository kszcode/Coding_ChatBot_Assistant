[
    {
        "content": "\n\nI want this script to prompt the user with German language.\nFind all relevant texts.\n\nAs a positive example consider:\n$email.after(`<label id=\"email-error\" class=\"error\" for=\"email\">Please enter a valid email address</label>`); .\n\nThis is one of the instructions that I want you to extract.\n\nAs a negative example consider:\nlogThisState(\"inlineCP:submitHandler: startCheckout\");\nthis is a negative example because this is only for logging and logging is OK to be in English.\n\nNow please extract all instructions that could show the user english text.\n",
        "role": "user"
    },
    {
        "content": "As a JavaScript Code Virtuoso:\n- If the user provides instructions:\n- Ask for clarification if instructions are unclear.\n- Otherwise, write JavaScript code following user instructions.\n- Preserve or improve any comments in the code.\n- Follow JavaScript's best practices and coding standards.\n- Provide explanations of the code if the user asks.\n- If the user provides a code scratchpad:\n- If it's blank, wait for the user's request to write code.\n- If it contains code, use your best judgment to decide whether to modify the existing code or use it as reference.\n\nCoding scratchpad:\nimport * as $ from 'jquery';\nimport 'bootstrap';\nimport './scripts/jquery.validate.min.js';\nimport './scripts/jquery.additional-methods.min.js';\nimport {logThisState, logError} from \"./utilities\";\n// import braintree from \"braintree-web\";\nimport {loadStripe, Appearance, Stripe, StripeCardNumberElement, StripeIbanElement} from '@stripe/stripe-js';\nimport {initializeCheckoutPageState, paypalLoadingBody} from \"./appState\";\n\nconst moment = require('moment');\nconst digital_prod_id = [1, 3];\n\ndeclare global {\n    interface Window {\n        moment: any;\n    }\n}\n\nwindow.moment = moment;\n\n// Dictionary containing responsePayload and initializedBrainTreeSubmitHandler\n// extracted from BrainTree SDK\nwindow._cpBrainTreeDict = {}; // response from braintree\n\nconsole.log(\"%cModule loaded: %c appLogic.js\", \"font-weight:bold;color: green;\", \"font-weight:normal;\");\n\ndeclare global {\n    interface Window {\n        _cpBrainTreeDict: any;\n        _cpStripeDict: any;\n        actionAfterThankYou: any;\n        callbackCheckoutSuccess: [() => void];\n        checkoutEngineVersion: string;\n        configConductorUrl: string;\n        configSiteID: string;\n        configSubsApiUrl: string;\n        configUserHostUrl: string;\n        configPaypalUrl: string;\n        digitalProductsData: any;\n        ep: any;\n        epCheckoutParams: any;\n        epSubs: any;\n        extractedURLParams: any;\n        fieldBackup: any;\n        nextPlanDescription: any;\n        selectedPlan: any;\n        selectedPlanDescription: any;\n        UpgradeOffer: any;\n        configForcePaymentGateway: any;\n        configUseTestStripe: boolean;\n    }\n}\n\nwindow.extractedURLParams = window.extractedURLParams || {};\nwindow.epCheckoutParams = window.epCheckoutParams || {};\nwindow.epSubs = window.epSubs || {};\nwindow._cpBrainTreeDict = window._cpBrainTreeDict || {};\nwindow._cpStripeDict = window._cpStripeDict || {};\nwindow.checkoutEngineVersion = window.checkoutEngineVersion || '';\nwindow.selectedPlan = window.selectedPlan || {};\n// window.callbackCheckoutSuccess = window.callbackCheckoutSuccess;\n// window.actionAfterThankYou = window.actionAfterThankYou;\nwindow.fieldBackup = window.fieldBackup || {};\nwindow.ep = window.ep || [];\nwindow.configSubsApiUrl = window.configSubsApiUrl || '';\nwindow.configConductorUrl = window.configConductorUrl || '';\nwindow.configUserHostUrl = window.configUserHostUrl || '';\nwindow.configPaypalUrl = window.configPaypalUrl || '';\nwindow.UpgradeOffer = window.UpgradeOffer || {};\n\ninterface MessageDictionary {\n    [key: string]: {\n        [key: string]: string\n    }\n}\n\nconst localizedMessages: MessageDictionary = {\n    \"en\": {\n        \"checkoutError\": \"Unable to checkout, please verify that your payment details are correct.\",\n        \"subscriptionPurchaseError\": \"Error purchasing subscription, please enter the correct billing zipcode for your card.\",\n        \"prepaidCardError\": \"Sorry we don't accept prepaid card in general. But if you are using a social security card or your case is special, please call us at 02 8988 5600 | 03 9898 8188.\",\n        \"checkoutErrorWithSupport\": \"Unable to checkout, please verify that your payment details are correct. If you need further assistance, please call us at 02 8988 5600 | 03 9898 8188.\",\n        \"checkoutErrorLogoutOrContact\": \"Unable to checkout, please try logging out or contacting our customer service.\",\n        \"enterValidEmailAddress\": \"Please enter a valid email address\"\n    },\n    \"de\": {\n        \"checkoutError\": \"Der Bezahlvorgang konnte nicht abgeschlossen werden. Bitte \u00fcberpr\u00fcfen Sie Ihre Zahlungsdetails.\",\n        \"subscriptionPurchaseError\": \"Fehler beim Kauf des Abonnements, bitte geben Sie die korrekte Postleitzahl f\u00fcr Ihre Karte ein.\",\n        \"prepaidCardError\": \"Es tut uns leid, wir akzeptieren generell keine Prepaid-Karten. Wenn Sie jedoch eine Sozialversicherungskarte verwenden oder Ihr Fall besonders ist, rufen Sie uns bitte unter 02 8988 5600 | 03 9898 8188 an.\",\n        \"checkoutErrorWithSupport\": \"Der Bezahlvorgang konnte nicht abgeschlossen werden. Bitte \u00fcberpr\u00fcfen Sie Ihre Zahlungsdetails. Wenn Sie weitere Hilfe ben\u00f6tigen, rufen Sie uns bitte unter 02 8988 5600 | 03 9898 8188 an.\",\n        \"checkoutErrorLogoutOrContact\": \"Der Bezahlvorgang konnte nicht abgeschlossen werden. Bitte versuchen Sie sich abzumelden oder unseren Kundendienst zu kontaktieren.\",\n        \"enterValidEmailAddress\": \"Bitte geben Sie eine g\u00fcltige E-Mail-Adresse ein\"\n    }\n};\n\nlet currentLanguage: string = 'de';\n\n\nlet cpState: any = {\n    paymentType: 'stripe-credit',\n};\n\nexport async function setCpPageState() {\n    // debugger;\n    cpState = await initializeCheckoutPageState();\n    // debugger;\n    logThisState(\"setCpPageState: cpState\", cpState);\n    return cpState;\n}\n\nexport function getCpPageState() {\n    return cpState;\n}\n\nfunction registerSEPA_creditCardChange() {\n\n    // Attach the event listener to both tab buttons\n    $('#lastschrift-tab, #credit-card-tab, #paypal-tab').on('shown.bs.tab',\n        async function (event: JQuery.TriggeredEvent) {\n            // Get the id of the current tab\n            const activeTabId = (event.target as HTMLElement).id;\n\n            // // extract relatedTarget from event\n            // const relatedTarget = (event as EventBase).relatedTarget;\n            logThisState(\"registerSEPA_creditCardChange: activeTabId\", activeTabId);\n\n            // Add your logic here when tab changes\n            if (activeTabId === 'lastschrift-tab') {\n                await initializeStripePaymentForSepa();\n            } else if (activeTabId === 'credit-card-tab') {\n                await initializeStripePaymentForCreditCard();\n            } else if (activeTabId === 'paypal-tab') {\n                cpState.paymentType = 'paypal';\n            }\n\n        });\n\n}\n\nexport async function initializeCheckoutPage(params: any = {}) {\n\n    logThisState(\"window.initInlineCP: window.epCheckoutParams is called\", window.epCheckoutParams);\n    // debugger;\n\n    let $email = $('#email');\n    if (params?.autofocus) {\n        $email.trigger('focus');\n    }\n\n    await setCpPageState();\n    logThisState(\"checkout-inline-digital called cpState=\", cpState);\n\n    // set window.nextPlanDescription\n    if (cpState.afterTrialPlan.planId) {\n        window.nextPlanDescription = {\n            planId: cpState.afterTrialPlan.planId,\n            planPeriod: cpState.afterTrialPlan.planPeriod,\n            planPeriodUnit: cpState.afterTrialPlan.planPeriodUnit,\n            valueCharge: cpState.afterTrialPlan.planPrice\n        }\n    } else {\n        window.nextPlanDescription = {\n            planId: cpState.selectedPlanDescription.planId,\n            planPeriod: cpState.selectedPlanDescription.planPeriod,\n            planPeriodUnit: cpState.selectedPlanDescription.planPeriodUnit,\n            valueCharge: cpState.selectedPlanDescription.planPrice\n        }\n    }\n\n    logThisState(\"window.initInlineCP: window.epCheckoutParams\", window.epCheckoutParams);\n    logThisState(\"window.initInlineCP: window.epSubs\", window.epSubs);\n\n    // debugger;\n    const allUrlParams = window.epSubs.getAllUrlParams();\n    logThisState(\"window.initInlineCP: allUrlParams (note: compare with window.extractedURLParams)\", allUrlParams);\n\n    // set up the metadata, this is temporarily disabled\n    handleCustomFields();\n\n    // await initializeStripePayment();\n    registerSEPA_creditCardChange();\n\n    // debugger;\n    // let stripePaymentSelected = isStripePaymentSelected();\n    // TODO check and fix function isStripePaymentSelected\n    let stripePaymentSelected = true;\n    // debugger;\n    if (stripePaymentSelected) {\n        logThisState(\"window.initInlineCP: isStripePaymentSelected: true with cpState\", cpState)\n        $('#payment-stripe').show();\n        // await initializeStripePaymentForCreditCard();\n        await initializeStripePaymentForSepa();\n    } else {\n        logThisState(\"window.initInlineCP: isStripePaymentSelected: false with cpState\", cpState)\n    }\n\n\n    if (cpState.isLoggedIn) { // debugger;\n        // set up customer id\n        cpState.customerData.token = allUrlParams.token ? allUrlParams.token : getCookie(\"epoch_token\");\n        cpState.customerData.userid = ($ as any).cookie(\"epoch_user_id\");\n        // Get user information and check existing subscriptions and payment - updated 2023-03-07\n        // debugger;\n        await setCustomerDetails();\n    } else if (window.epCheckoutParams.email) {\n        let email = decodeURIComponent(window.epCheckoutParams.email);\n        $email.val(email);\n        $email.attr('disabled', 'true');\n\n        // addToAbandonedCartJourney(email);\n\n        if (window.epCheckoutParams.firstname) {\n            let firstname = decodeURIComponent(window.epCheckoutParams.firstname);\n            $('#customer-fname').val(firstname);\n            if (window.epCheckoutParams.lastname) {\n                let lastname = decodeURIComponent(window.extractedURLParams.lastname);\n                $('#customer-lname').val(lastname);\n            }\n        }\n    }\n\n    // set CC info placeholders\n    try {\n        $('#zip').mask('0000');\n    } catch (e) {\n        console.warn(\"Error setting zip mask: \", e);\n    }\n\n    // beautify input on focus loose focus\n    let $input = $(\"input\");\n    $input.on(\"focus\", function () {\n        $(this).addClass(\"focus\");\n    });\n    $input.on(\"blur\", function () {\n        $(this).removeClass(\"focus\");\n    });\n\n    // beautify input on input has value, is empty\n    $input.on(\"keyup\", function () {\n        if ($(this).val()) {\n            $(this).removeClass(\"empty\");\n            $(this).addClass(\"val\");\n        } else {\n            $(this).addClass(\"empty\");\n            $(this).removeClass(\"val\");\n        }\n    });\n\n    // configure the validation and submitHandler for the form submission\n    initializeFormValidationAndSubmitHandler();\n\n    // using cpState.selectedPlanDescription and window.nextPlanDescription\n    // decorate right column with information about subscription\n    showPlanDescription();\n\n    try {\n\n        let planData = cpState.selectedPlanDescription.planId;\n        planData += (window.epCheckoutParams.cf_plan_after_trial_ends) ? \"---\" + window.epCheckoutParams.cf_plan_after_trial_ends : \"\";\n\n        const dataForTracking = {\n            \"abtest_id\": ($ as any).cookie('digital_subscription_tracking_abtest_id') || \"\",\n            \"user_id\": ($ as any).cookie('epoch_user_id'),\n            \"category\": 'Checkout ' + cpState.selectedPlanDescription.planType + ' Page Loaded',\n            \"action\": planData,\n            \"label\": window.epCheckoutParams.src_cat,\n            \"src_cat\": window.epCheckoutParams.src_cat,\n            \"src_tmp\": window.epCheckoutParams.src_tmp,\n            \"src_url\": window.epCheckoutParams.src_url,\n            \"src_cmp\": window.epCheckoutParams.src_cmp,\n            \"value\": '',\n            \"metadata\": window.checkoutEngineVersion,\n            \"page\": window.location.href,\n            \"canonical_url\": window.epCheckoutParams.src_url,\n            \"real_url\": window.epCheckoutParams.src_url,\n            \"json_data\": JSON.stringify({\n                params: window.epCheckoutParams,\n                checkoutEngineVersion: window.checkoutEngineVersion\n            })\n        };\n\n        logThisState(\"window.initInlineCP: db/senddata: dataForTracking\", dataForTracking);\n        window.epSubs.trackDataEvent(dataForTracking);\n    } catch (e) {\n        console.log(\"exception-299\", e)\n    }\n\n    // set up the capture of user data for each relevant input field\n    setupBehaviourTracking();\n\n    logThisState(\"window.initInlineCP: finished\");\n    console.log(\"--------- Btest - cpState: \", cpState);\n\n}\n\nfunction isValidEmail(email: string) {\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n}\n\nasync function handleSubmit(form: HTMLFormElement, event?: JQueryEventObject): Promise<void> {\n\n    if (event) {\n        event.preventDefault();\n    }\n\n    const $checkoutForm = $('#checkout-form');\n    const $submitButton = $checkoutForm.find(':input[type=submit]');\n    const $errorHolder = $('.cb-main-footer .error-holder p.error');\n    const $email = $('#email');\n    const email = $email.val() as string;\n\n    function enableSubmitButton() {\n        $submitButton.prop('disabled', false);\n    }\n\n    function disableSubmitButton() {\n        $submitButton.prop('disabled', true);\n    }\n\n    function displayError(message: string) {\n        $errorHolder.text(message);\n    }\n\n    function handleError(error: string, gaEvent: string) {\n        console.log(error);\n        ga('send', 'event', 'Digital Checkout Page', gaEvent);\n    }\n\n    disableSubmitButton();\n    displayError('');\n\n    ga('send', 'event', 'Digital Checkout Page', 'UX - Submit Clicked');\n    cpState.attemptCount++;\n\n    let validEmail = isValidEmail(email);\n    if (validEmail) {\n        try {\n            // debugger;\n            logThisState(\"initializeFormValidationAndSubmitHandler: start checkout if validated by Captcha\");\n            await grecaptcha.ready(async function () {\n                try {\n                    const token = await grecaptcha.execute('6LcmJLkZAAAAAMziOnaFrJkOV4ClF_H8OvcqvlyE', {action: 'submit'});\n                    displayError('');\n                    cpState.recaptchaToken = token;\n                    logThisState(\"initializeFormValidationAndSubmitHandler: calling startCheckout\");\n\n                    if (cpState.paymentType === 'stripe-credit') {\n                        logThisState(\"inlineCP:submitHandler: call callStripeCCSubmitHandler\");\n                        window._cpStripeDict.callStripeCCSubmitHandler();\n                    } else if (cpState.paymentType === 'stripe-sepa-payment') {\n                        logThisState(\"inlineCP:submitHandler: call callStripeSepaSubmitHandler\");\n                        window._cpStripeDict.callStripeSepaSubmitHandler();\n                    } else if (cpState.paymentType === 'paypal') {\n                        logThisState(\"inlineCP:submitHandler: call initializedPaypalHandler\");\n                        initPaypalExpressPayment();\n                    } else {\n                        logThisState(\"inlineCP:submitHandler: startCheckout\");\n                        await startCheckout();\n                    }\n                } catch (error) {\n                    console.error('initializeFormValidationAndSubmitHandler: Error in grecaptcha.execute:', error);\n                    enableSubmitButton();\n                }\n            });\n        } catch (e) {\n            handleError(\"initializeFormValidationAndSubmitHandler: exception-327\", 'ERROR - startCheckout');\n            handleError(`Digital Checkout Page - Error Log: ${e.message}`, 'checkoutpage:startCheckout');\n            enableSubmitButton();\n        }\n    } else {\n        $email.after(`<label id=\"email-error\" class=\"error\" for=\"email\">Please enter a valid email address</label>`);\n        $email.focus();\n        enableSubmitButton();\n    }\n\n}\n\nfunction initializeFormValidationAndSubmitHandler() {\n    logThisState(\"window.initInlineCP: initializeFormValidationAndSubmitHandler: #checkout-form validate called\");\n\n    $('#checkout-form').validate({\n        rules: {},\n        messages: {},\n        submitHandler: function (form, event) {\n            console.log(\"initializeFormValidationAndSubmitHandler: submitHandler() is called form=\", form);\n            console.log(\"initializeFormValidationAndSubmitHandler: submitHandler() is called event=\", form);\n            handleSubmit(form, event).then(r => {\n            });\n        }\n    });\n\n    // logThisState(\"window.initInlineCP: initializeFormValidationAndSubmitHandler: #checkout-form validate after\");\n\n}\n\nfunction showPlanDescription() {\n\n    let today = window.moment();\n    const selectedPlan = cpState.selectedPlanDescription;\n    const nextPlan = window.nextPlanDescription;\n\n    const paymentDelay = cpState.selectedPlanDescription.planPeriod + ' ' +\n        cpState.selectedPlanDescription.planPeriodUnit +\n        (cpState.selectedPlanDescription.planPeriod > 1 ? 's' : '');\n\n    const nextRenewal = today.add(selectedPlan.planPeriod, selectedPlan.planPeriodUnit);\n    selectedPlan.planFrequencyString =\n        (parseInt(nextPlan.planPeriod) > 1)\n            ? (nextPlan.planPeriod + ' ' + nextPlan.planPeriodUnit + 's')\n            : nextPlan.planPeriodUnit;\n\n    $('.today-total-value').text(getMoneyString(cpState.offerDetail.content.first_billing_amount));\n    // $('.total-gifts-value').text(selectedPlan.giftValueSum);\n    // $('.value-digital-sub').text(selectedPlan.valueDigitalSubs);\n    // $('.value-total').text(selectedPlan.valueTotal);\n    $('.payment-delay-text').text(paymentDelay);\n    // $('.gift-without-card-value').text(selectedPlan.giftValueSum - selectedPlan.giftValueGiftCard);\n    // $('.value-total-without-giftcard').text(selectedPlan.valueTotal - selectedPlan.giftValueGiftCard);\n\n    if ((selectedPlan.giftValueSum - selectedPlan.giftValueGiftCard) === 0) {\n        $(\".gift-value-wrapper\").hide();\n    }\n\n    $('.pre-loader').hide();\n\n    $('.next .price-value').text('$' + getMoneyString(nextPlan.valueCharge));\n    $('.next .date-value').text(nextRenewal.format('MMMM Do YYYY'));\n    $('.next .frequency-value').text(selectedPlan.planFrequencyString);\n\n    // renderPaypal(selectedPlan.valueCharge);\n}\n\n\nfunction handleCustomFields() {\n    let urlParams = window.epCheckoutParams;\n    // console.log('extracted', urlParams);\n\n    cpState.checkoutData.meta_data = {\n        // \"cf_source_landing_page\": urlParams.cf_source_landing_page,\n        \"cf_plan_after_trial_ends\": window.epCheckoutParams.cf_plan_after_trial_ends,\n        \"cf_utm_campaign\": urlParams.cf_utm_campaign || window.epCheckoutParams.utm_campaign,\n        \"cf_utm_source\": urlParams.cf_utm_source || window.epCheckoutParams.utm_source,\n        \"cf_utm_medium\": urlParams.cf_utm_medium || window.epCheckoutParams.utm_medium,\n        \"cf_utm_term\": urlParams.cf_utm_term || window.epCheckoutParams.utm_term,\n        \"cf_utm_content\": urlParams.cf_utm_content || window.epCheckoutParams.utm_content,\n        \"cf_source_page_variant\": window.epCheckoutParams.cf_source_page_variant,\n        \"cf_source_page_url\": (window.extractedURLParams.cf_source_page_url) ? window.extractedURLParams.cf_source_page_url.substr(0, 250) : \"\",\n        \"cf_impact_clickid\": cpState.selectedPlanDescription.planId, // we want this to be always the first active plan\n        // \"cf_referral_offer\": urlParams.cf_referral_offer,\n        // \"cf_friend_referral\": urlParams.cf_friend_referral\n    }\n\n    // if there are not any utm parameters in url, we read it from cookies\n    try {\n        if (!cpState.checkoutData.meta_data.cf_utm_campaign && !cpState.checkoutData.meta_data.cf_utm_source && !cpState.checkoutData.meta_data.cf_utm_medium && !cpState.checkoutData.meta_data.cf_utm_term && !cpState.checkoutData.meta_data.cf_utm_content) {\n            cpState.checkoutData.meta_data.cf_utm_campaign = window.epSubs.getVisitorUTMs().utm_campaign;\n            cpState.checkoutData.meta_data.cf_utm_source = window.epSubs.getVisitorUTMs().utm_source;\n            cpState.checkoutData.meta_data.cf_utm_medium = window.epSubs.getVisitorUTMs().utm_medium;\n            cpState.checkoutData.meta_data.cf_utm_term = window.epSubs.getVisitorUTMs().utm_term;\n            cpState.checkoutData.meta_data.cf_utm_content = window.epSubs.getVisitorUTMs().utm_content;\n        }\n    } catch (e) {\n        console.log(\"exception-337\", e);\n    }\n\n    logThisState(\"handleCustomFields: cpState.checkoutData.meta_data=\", cpState.checkoutData.meta_data);\n\n}\n\n/**\n * Get user information and check existing subscriptions and payment\n * @returns {Promise<void>}\n */\nexport async function setCustomerDetails() {\n\n    // debugger;\n    try {\n        // debugger;\n        let userInfo = await subscriptionAPIs.getUserInformation();\n        // debugger;\n        logThisState(\"setCustomerDetails: Got user information\", userInfo);\n\n        cpState.customerData.email = userInfo.email;\n        let $email = $('#email');\n        $email.val(userInfo.email);\n        $email.attr('disabled', 'true'); // important to disable to link to a ymk id\n\n        // async call add_abandoned_cart_email with tracking information\n        // addToAbandonedCartJourney(cpState.customerData.email);\n\n        // if userInfo contains name, then set the form values\n        if (userInfo.name) {\n            let nameArr = userInfo.name.split(' ');\n            $('#customer-fname').val(nameArr[0]);\n            cpState.customerData.firstname = nameArr[0];\n            if (nameArr.length > 1) {\n                $('#customer-lname').val(nameArr[1]);\n                cpState.customerData.lastname = nameArr[1];\n            }\n        }\n\n        // window.epCheckoutParams is set in public-labs/epoch-ai/et_utils.js:392:\n        if (cpState.selectedPlanDescription.planId.indexOf('donation') === -1) {\n            // only check if person is buying a digital, not donation plan\n            await checkExistingSubs(cpState.customerData.email, async (): Promise<void> => {\n                await checkExistingPayment();\n                logThisState(\"setCustomerDetails: after checkExistingPayment cpState.customerData.customer_id\", cpState.customerData.customer_id);\n            });\n        }\n    } catch (error) {\n        logThisState(\"setCustomerDetails: generated error\", error);\n        ga('send', 'event', 'Digital Checkout Page', 'ERROR get user information', JSON.stringify(error));\n    }\n}\n\n\n/**\n * Check if there is valid subscription\n * - if there is and it's digital, then show and exit\n * - if there is not then call the handler function which can be:\n *      -  await purchaseSubscription(); // which calls subscriptionAPIs.createSubscriptionUsingOfferAndCreditCard(cpState.recaptchaToken);\n *      or it is\n *      -  await checkExistingPayment(); // which sets cpState.hasExistingPayment flag\n *\n * @param {string} email\n * @param {function} callback  is called if there is no valid subscription\n */\nexport async function checkExistingSubs(email: string, callback: () => Promise<void>) {\n    try {\n\n        // debugger;\n        logThisState(\"checkExistingSubs: for email\", email);\n\n        const resSubsInfo = await subscriptionAPIs.getExistingSubsInfo(email);\n        // debugger;\n        logThisState(\"checkExistingSubs: got existingSubsInfo\", resSubsInfo);\n\n        let hasExistingSubscription = resSubsInfo && resSubsInfo.data && resSubsInfo.data.product_id;\n\n        if (hasExistingSubscription) {\n            cpState.customerData.customer_id = resSubsInfo.data.customer_id;\n            logThisState(\"checkExistingSubs: found customer_id\", cpState.customerData.customer_id);\n        }\n\n        if (cpState.customerData.forced_invalid_subscription) {\n            hasExistingSubscription = false;\n        }\n        // console.log(\"---------- Btest - hasExistingSubscription: \", hasExistingSubscription);\n\n        if (!hasExistingSubscription) {\n            // here it does not have a subscription type\n            if (typeof callback == 'function') {\n                logThisState(\"checkExistingSubs: has no valid Data Subscription, or simulated:\", cpState.customerData.forced_invalid_subscription);\n                callback();\n            }\n            return;\n        }\n\n        const subs_type = resSubsInfo.data.product_id;\n        logThisState(\"checkExistingSubs: has existingSubInfo with subscription_type\", subs_type);\n        const subs_status = ('' + resSubsInfo.data.subscription_status).toLowerCase();\n\n        // Digital and Video duplication checks\n        if (digital_prod_id.includes(cpState.offerDetail.offer_detail.plan.product.id)) {\n            if (subs_status === \"active\"\n                && (digital_prod_id.includes(subs_type))) {\n                // handle EXISTING digital & print subs\n                logThisState(\"checkExistingSubs: has active existingSubInfo call handleExistingSubscription\");\n                handleExistingSubscription(subs_type);\n                return;\n            }\n\n            // logged in possible cases:\n            // 1. cancelled subscription\n            // 2. payment on file because they bought something else from us\n            if (typeof callback == 'function') {\n                // not logged in, no active print or digital sub\n                callback();\n            }\n        } else {\n            // Bryan added\n            if (typeof callback == 'function') {\n                // not logged in, no active print or digital sub\n                callback();\n            }\n        }\n    } catch (e) {\n        console.error(\"checkExistingSubs: e=\", e);\n        if (typeof callback == 'function') {\n            callback();\n        }\n        ga('send', 'event', 'Digital Checkout Page', 'ERROR check existing subs info', JSON.stringify(e));\n    }\n}\n\n\nexport async function checkExistingPayment() {\n\n    if (cpState.customerData.forced_invalid_payment) {\n        logThisState(\"checkExistingPayment: forced to set payment to invalid\");\n        return;\n    }\n\n    if (!cpState.customerData.customer_id) {\n        logThisState(\"checkExistingPayment: does not have an existing customer_id\");\n        return;\n    }\n\n    try {\n        logThisState(\"checkExistingPayment: for cpState.customerData.customer_id\", cpState.customerData.customer_id);\n        let resPaymentMethod = await subscriptionAPIs.getPaymentMethod();\n        logThisState(\"checkExistingPayment: got payment method\", resPaymentMethod);\n\n        if (resPaymentMethod && resPaymentMethod.data && !$.isEmptyObject(resPaymentMethod.data)) {\n            logThisState(\"checkExistingPayment: payment method is set, calling handleExistingPayment \" +\n                \"for resPaymentMethod.data.MaskedNumber\", resPaymentMethod.data.MaskedNumber);\n            handleExistingPayment(resPaymentMethod.data.MaskedNumber);\n            cpState.hasExistingPayment = true;\n            logThisState(\"checkExistingPayment: cpState.hasExistingPayment is set\");\n            cpState.customerData.customer_id = resPaymentMethod.data.CustomerID;\n            logThisState(\"checkExistingPayment: set customer ID cpState.customerData.customer_id\", cpState.customerData.customer_id);\n        }\n    } catch (error) {\n        logThisState(\"checkExistingPayment: got error\", error);\n        ga('send', 'event', 'Digital Checkout Page', 'ERROR check existing payment information', JSON.stringify(error));\n    }\n}\n\nfunction getStripeKey() {\n    // TODO - do an API call to get the stripe key\n    let stripeKey = 'pk_live_51HpXGBBkvvoYiDHGJ6bwN8ra8hRMN16nE8QY0I0dMIX7gbaPQd7SV4oTBUKFLAvmPFUgbDLjVjjA9he3Tsa4hGzK00G1nLIwsC'; // de live\n    if (window.configUseTestStripe) {\n        stripeKey = 'pk_test_51HpXGBBkvvoYiDHGVkmhqveXeGJtvNR0jAVAqDBK7oqTKybcPEFWL17TvMMgdrNOEUVHH7JkDNjQCNnam1zqWacm00O3SvLEmB';\n    }\n    return stripeKey;\n}\n\nasync function initializeStripePaymentForSepa() {\n    logThisState(\"initializeStripePaymentForSepa: called\");\n    cpState.paymentType = 'stripe-sepa-payment';\n\n    let stripe: Stripe | null;\n\n    try {\n        stripe = await loadStripe(getStripeKey());\n        logThisState(\"initializeStripePaymentForSepa: Stripe loaded successfully\");\n    } catch (e) {\n        // stripe did not load, fallback to braintree\n        // cpState.gateway = 'braintree';\n        // $('#payment-using-hosted-field-integration').show();\n        // $('#payment-stripe').hide();\n        logError(\"Stripe load error, load braintree instead.\", e);\n        alert('STRIPE LOAD ERROR!');\n        // await initializeBraintreePayment();\n        return;\n    }\n\n    // Create an instance of Elements\n    const elements = stripe.elements();\n\n    // Create an instance of the iban Element\n    const iban = elements.create('iban', {\n        style: {\n            base: {\n                fontSize: '16px',\n            },\n        },\n        supportedCountries: ['SEPA'],\n    });\n\n    // Add an instance of the iban Element into the `iban-element` <div>\n    iban.mount('#iban-element');\n\n    window._cpStripeDict.callStripeSepaSubmitHandler = () => {\n        logThisState('callStripeSepaSubmitHandler is called');\n        callSepaCreateForStripe(stripe, iban);\n    }\n\n    async function callSepaCreateForStripe(stripe: Stripe, iban: StripeIbanElement) {\n        extractFormData('#checkout-form');\n        logThisState(\"callSepaCreateForStripe: cpState.inputData\", cpState.inputData);\n\n        let $loading = $('.loading-throbber-wrapper');\n        try {\n            // debugger; // check if iban.value is a string\n            const stripeSepaPayload = {\n                type: 'sepa_debit',\n                currency: 'eur',\n                // sepa_debit: {\n                //     // iban: 'DE89370400440532013000', // works, but it is hardcoded\n                // },\n                owner: {\n                    name: cpState.inputData.customer_fname + ' ' + cpState.inputData.customer_lname,\n                    email: cpState.inputData.email,\n                }\n            };\n\n            logThisState(\"callSepaCreateForStripe: stripeSepaPayload\", JSON.stringify(stripeSepaPayload));\n\n            const result = await stripe.createSource(iban, stripeSepaPayload);\n\n            // debugger; // check createSource result before passing it on\n            if (result.error) {\n                // Show error in your UI\n                throw new Error(result.error.message);\n            }\n\n            // Send PaymentMethod ID to your server\n            logThisState(\"initializeStripePaymentForSepa:stripe.createSource: \" +\n                \"result: \", result);\n            // debugger; // check the result before passing it on\n\n\n            // debugger; // need to check the result before passing it on\n            window._cpStripeDict.sepaResponsePayload = result;\n            await startCheckout();\n\n        } catch (e) {\n            logThisState(\"initializeStripePaymentForSepa:stripe.createSource:error \", {err: e});\n            $loading.fadeOut('fast');\n            $('#purchase-btn').prop('disabled', false);\n            outputLocalizedText('.error-holder .error', 'checkoutError');\n        }\n    }\n\n}\n\nasync function initializeStripePaymentForCreditCard() {\n    logThisState(\"initializeStripePaymentForCreditCard: called\");\n    cpState.paymentType = 'stripe-credit';\n\n    let stripe: Stripe | null;\n\n    try {\n        stripe = await loadStripe(getStripeKey());\n        logThisState(\"initializeStripePaymentForCreditCard: Stripe loaded successfully\");\n    } catch (e) {\n        // stripe did not load, fallback to braintree\n        // cpState.gateway = 'braintree';\n        // $('#payment-using-hosted-field-integration').show();\n        // $('#payment-stripe').hide();\n        logError(\"Stripe load error, load braintree instead.\", e);\n        alert('STRIPE LOAD ERROR!');\n        // await initializeBraintreePayment();\n        return;\n    }\n\n    const appearance: Appearance = {\n        theme: 'none'\n    };\n    const elements = stripe.elements({appearance: appearance});\n\n    const styles = {\n        base: {\n            fontSize: '16pt',\n            color: '#3A3A3A',\n            '::placeholder': {\n                color: '#a9a9a9'\n            },\n            '::-webkit-input-placeholder': {\n                color: '#a9a9a9'\n            },\n            ':-moz-placeholder': {\n                color: '#a9a9a9'\n            },\n            '::-moz-placeholder': {\n                color: '#a9a9a9'\n            },\n            ':-ms-input-placeholder ': {\n//                color: '#bacbca'\n                color: '#a9a9a9'\n            },\n        },\n        invalid: {\n            color: '#E25950',\n        },\n        valid: {\n            color: 'green'\n        }\n    }\n\n    const cardNumberElement = elements.create(\"cardNumber\", {style: styles});\n    const cardExpiryElement = elements.create(\"cardExpiry\", {style: styles});\n    const cardCvvElement = elements.create(\"cardCvc\", {style: styles});\n    cardNumberElement.mount(\"#stripe-card-number\");\n    cardExpiryElement.mount(\"#stripe-expiration-date\");\n    cardCvvElement.mount(\"#stripe-cvv\");\n\n    window._cpStripeDict.callStripeCCSubmitHandler = () => {\n        logThisState('callStripeCCSubmitHandler is called with');\n        stripeSubmitCreditCardHandler(stripe, cardNumberElement);\n    }\n\n    async function stripeSubmitCreditCardHandler(stripe: Stripe, cardNumberElement: StripeCardNumberElement) {\n        let $loading = $('.loading-throbber-wrapper');\n        try {\n            $loading.fadeIn('fast');\n            logThisState('cpState:', cpState);\n            const billing_zip = $(\"#billing-zip\").val();\n            const res = await stripe.createPaymentMethod({\n                type: 'card',\n                card: cardNumberElement,\n                billing_details: {\n                    address: {\n                        postal_code: (billing_zip as string)\n                    }\n                }\n            });\n            if (res && res.error) {\n                throw new Error(res.error.message);\n            }\n            logThisState(\"window._cpStripeDict.responsePayload is set:\", res.paymentMethod);\n            window._cpStripeDict.responsePayload = res.paymentMethod;\n            await startCheckout();\n        } catch (e) {\n            $loading.fadeOut('fast');\n            $('#purchase-btn').prop('disabled', false);\n            outputLocalizedText('.error-holder .error', 'checkoutError');\n\n            logThisState(\"Stripe error response payload\", {err: e});\n        }\n    }\n}\n\nasync function initPaypalExpressPayment() {\n    renderPaypal();\n    // TODO: need string translation\n    try {\n        const expressCheckoutRes = await subscriptionAPIs.setPaypalExpressCheckout('The Epoch Times Digital Subscription');\n        console.log('expressCheckoutRes', expressCheckoutRes);\n        const { data } = expressCheckoutRes;\n        loadPaypalWindow(data);\n    } catch (e) {\n        // show error\n    }\n}\n\nlet paypalWin: Window;\nasync function renderPaypal() {\n    paypalWin = window.open(\"about:blank\", \"Paypal Checkout Window\", 'width=460, height=650');\n    \n    $(paypalWin.document.body).ready(function() {\n        $(paypalWin.document.body).html(paypalLoadingBody);\n    });\n}\n\nfunction loadPaypalWindow(billing_token: string) {\n    paypalWin.location.href = window.configPaypalUrl + billing_token;\n\n    $(\".paypal-checkout-overlay\").show();\n    $(\".paypal-checkout-continue\").click(function(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        paypalWin.focus();\n    });\n\n    const pollTimer = setInterval(function () {\n        if (paypalWin.closed) {\n            window.clearInterval(pollTimer);\n            $(\".paypal-checkout-overlay\").hide();\n        }\n\n        try {\n            const paypalWinUrl = paypalWin && paypalWin.document && paypalWin.document.URL && paypalWin.document.URL;\n            if (paypalWinUrl && paypalWinUrl.includes('token=')) {\n                window.clearInterval(pollTimer);\n\n                let params = paypalWinUrl.split('?')[1];\n                let queryString = new URLSearchParams(params);\n\n                const pToken = queryString.get('token');\n\n                handlePostPaypalLogin(pToken);\n\n                $(\".paypal-checkout-overlay\").hide();\n                paypalWin.close();\n            }\n        } catch(e) {\n            if (!e.message.includes(\"Permission denied to access property\")) {\n                console.log(e);\n            }\n        }\n    }, 100);\n}\n\nasync function handlePostPaypalLogin(token: string) {\n    try {\n        const { data } = await subscriptionAPIs.createBillingAgreement(token);\n        cpState.paypalPayload.nonce = data;\n        const billingAgreementDetails = await subscriptionAPIs.getBillingAgreementDetails(token);\n        cpState.paypalPayload.details = billingAgreementDetails.data;\n        console.log('billingAgreementDetails', billingAgreementDetails);\n        startCheckout();\n    } catch (e) {\n        console.error(e);\n    }\n}\n\nfunction extractFormData(formElement = '#checkout-form') {\n    let formArray = $(formElement).serializeArray();\n    let data: any = {};\n\n    formArray.forEach((obj) => {\n        let name = obj.name;\n        data[name] = obj.value;\n    });\n\n    cpState.inputData = data;\n}\n\nasync function startCheckout() {\n\n    logThisState(\"startCheckout: called\");\n\n    // disable purchase buttons\n    let $purchase = $('#purchase-btn');\n    $purchase.attr('disabled', 'disabled');\n    // show the processing spinner\n    let $loading = $('.loading-throbber-wrapper');\n    $loading.fadeIn('fast');\n\n    // reset the error message\n    let $subscription = $('.subscription-create-error');\n    $subscription.text('');\n    extractFormData('#checkout-form');\n    logThisState(\"startCheckout: extracted form data cpState.inputData\", cpState.inputData);\n    logThisState(\"startCheckout: checking cpState.isLoggedIn\", cpState.isLoggedIn);\n    logThisState(\"startCheckout: checking cpState.hasExistingPayment\", cpState.hasExistingPayment);\n\n    try {\n        // debugger; // L882\n        let hasExistingPayment = cpState.isLoggedIn && cpState.hasExistingPayment;\n        let hostedFieldIntegration = !$('#payment-using-hosted-field-integration').is(\":visible\");\n        if (hasExistingPayment && hostedFieldIntegration) {\n            logThisState(\"startCheckout: calling purchaseForExistingCustomer\");\n            await purchaseForExistingCustomer();\n        } else {\n            logThisState(\"startCheckout: calling completePurchase\");\n            await completePurchase();\n        }\n    } catch (e) {\n        logThisState(\"startCheckout: error received e\", e);\n        console.log('ERROR: completePurchase')\n        console.log(\"exception-842\", e);\n        $loading.hide();\n        $purchase.removeAttr('disabled');\n        $('#checkout-form').find(':input[type=submit]').prop('disabled', false);\n        ga('send', 'event', 'Digital Checkout Page', 'ERROR - completePurchase');\n        ga('send', 'event', 'Digital Checkout Page - Error Log', 'checkoutpage:completePurchase', e.message);\n        $subscription.text('Unable to create subscription, please try again later.');\n    }\n}\n\nasync function completePurchase() {\n\n    // set the email\n    let inputData = cpState.inputData;\n    let email = cpState.inputData.email || cpState.customerData.email;\n\n    // create the checkoutData object structure for create_subscription API\n    cpState.checkoutData.customer = {\n        \"first_name\": inputData.customer_fname,\n        \"last_name\": inputData.customer_lname,\n        \"email\": email,\n        // \"locale\": \"en-Au\"\n    };\n    cpState.checkoutData.offer_id = cpState.offerDetail.offer_id;\n    cpState.checkoutData.plan = {\"id\": cpState.offerDetail.content.plan.id};\n    cpState.checkoutData.billing = null;\n    cpState.checkoutData.shipping = null;\n\n\n    // debugger; // check the response payload structure, and cpState.paymentType\n\n    // set up the cpState.checkoutData based on the paymentType\n    if (cpState.paymentType === 'stripe-credit') {\n        logThisState(\"completePurchase: window._cpStripeDict.responsePayload\", window._cpStripeDict.responsePayload);\n        let stripeResponse = window._cpStripeDict.responsePayload || {};\n        let stripeDetails = stripeResponse.card;\n\n        cpState.checkoutData.payment = {\n            // \"nonce\": 'pm_card_visa',\n            \"nonce\": stripeResponse.id,\n            \"card_type\": stripeDetails.brand.replace(/^\\w/, (c: string) => c.toUpperCase()),\n            \"payment_type\": 'CreditCard',\n            \"last4_digits\": stripeDetails.last4,\n            \"expiration_year\": stripeDetails.exp_year.toString(),\n            \"expiration_month\": stripeDetails.exp_month.toString(),\n            \"zip_code\": stripeResponse.billing_details.address.postal_code,\n            \"gateway\": window.configForcePaymentGateway ?\n                window.configForcePaymentGateway : cpState.offerDetail.offer_detail.plan.product.default_gateway\n        };\n    } else if (cpState.paymentType === 'stripe-sepa-payment') {\n\n        logThisState(\"completePurchase: window._cpStripeDict.sepaResponsePayload\",\n            window._cpStripeDict.sepaResponsePayload);\n\n        // sampleSepaPayload\n        // {\n        //   \"source\": {\n        //     \"id\": \"src_1NBikJBkvvoYiDHGJgZX85S1\",\n        //     \"object\": \"source\",\n        //     \"amount\": null,\n        //     \"client_secret\": \"src_client_secret_IKl4NBdwwszPG7f8sHHIdf81\",\n        //     \"created\": 1685038723,\n        //     \"currency\": \"eur\",\n        //     \"flow\": \"none\",\n        //     \"livemode\": false,\n        //     \"mandate\": {\n        //       \"acceptance\": {\n        //         \"date\": null,\n        //         \"ip\": null,\n        //         \"offline\": null,\n        //         \"online\": null,\n        //         \"status\": \"pending\",\n        //         \"type\": null,\n        //         \"user_agent\": null\n        //       },\n        //       \"amount\": null,\n        //       \"currency\": null,\n        //       \"interval\": \"variable\",\n        //       \"notification_method\": \"none\",\n        //       \"reference\": \"HMH5MGGZXTDPKNQC\",\n        //       \"url\": \"https://hooks.stripe.com/adapter/sepa_debit/file/src_1NBikJBkvvoYiDHGJgZX85S1/src_client_secret_IKl4NBdwwszPG7f8sHHIdf81\"\n        //     },\n        //     \"owner\": {\n        //       \"address\": null,\n        //       \"email\": \"testIban-1685038719@code4good.men\",\n        //       \"name\": \"TestIban LN-1685038719\",\n        //       \"phone\": null,\n        //       \"verified_address\": null,\n        //       \"verified_email\": null,\n        //       \"verified_name\": null,\n        //       \"verified_phone\": null\n        //     },\n        //     \"sepa_debit\": {\n        //       \"bank_code\": \"37040044\",\n        //       \"branch_code\": null,\n        //       \"country\": \"DE\",\n        //       \"fingerprint\": \"F4eo01CoLsfiIKaG\",\n        //       \"last4\": \"3000\",\n        //       \"mandate_reference\": \"HMH5MGGZXTDPKNQC\",\n        //       \"mandate_url\": \"https://hooks.stripe.com/adapter/sepa_debit/file/src_1NBikJBkvvoYiDHGJgZX85S1/src_client_secret_IKl4NBdwwszPG7f8sHHIdf81\"\n        //     },\n        //     \"statement_descriptor\": null,\n        //     \"status\": \"chargeable\",\n        //     \"type\": \"sepa_debit\",\n        //     \"usage\": \"reusable\"\n        //   }\n        // }\n\n        let stripeResponse = (window._cpStripeDict\n            && window._cpStripeDict.sepaResponsePayload\n            && window._cpStripeDict.sepaResponsePayload.source) || {};\n        let stripeDetails = stripeResponse.sepa_debit || {};\n\n        // debugger; // check stripeResponse and stripeDetails\n\n        cpState.checkoutData.payment = {\n            \"nonce\": stripeResponse.id,\n            \"card_type\": stripeResponse.type,\n            \"payment_type\": 'Sepa_Debit',\n            \"last4_digits\": stripeDetails.last4,\n            // \"zip_code\": stripeResponse.billing_details.address.postal_code,\n            \"gateway\": window.configForcePaymentGateway ?\n                window.configForcePaymentGateway : cpState.offerDetail.offer_detail.plan.product.default_gateway\n\n        }\n\n    } else if (cpState.paymentType === 'paypal') {\n        let payload = cpState.paypalPayload;\n\n        cpState.checkoutData.payment = {\n            'payment_type': 'PayPalExpress',\n            'nonce': payload.nonce,\n            'email': payload.details.EMAIL[0],\n            'gateway': window.configForcePaymentGateway ?\n                window.configForcePaymentGateway : cpState.offerDetail.offer_detail.plan.product.default_gateway,\n            'first_name': payload.details.FIRSTNAME[0],\n            'last_name': payload.details.LASTNAME[0],\n            'make_primary': true\n        }\n    }\n\n    // cpState.checkoutData = cpState.checkoutData;\n    logThisState(\"completePurchase: calling checkExistingPayment, cpState.checkoutData=\", cpState.checkoutData);\n    await checkExistingSubs(email, async function () {\n        // debugger;\n        logThisState(\"completePurchase: calling purchaseSubscription\");\n        await purchaseSubscription();\n    });\n    logThisState(\"completePurchase: finished\");\n}\n\n/**\n * calls create subscription API using the cpState.recaptchaToken\n * ??? where was cpState.recaptchaToken  set\n * ??? isn't that for only single use\n */\nasync function purchaseSubscription() {\n\n    logThisState(\"purchaseSubscription: Called with cpState.recaptchaToken\", cpState.recaptchaToken);\n\n    try {\n\n        let response = await subscriptionAPIs.createSubscriptionUsingOfferAndCreditCard(cpState.recaptchaToken);\n\n        logThisState(\"purchaseSubscription: createSubscriptionUsingOfferAndCreditCard called response=\", response);\n\n        // if the response contains return_url_for_3ds,\n        // Create an iframe and set its source to the url value you extracted from the JSON response.\n        // This will open the 3D Secure authentication form within the iframe.\n        if (response && response.data && response.data.return_url_for_3ds) {\n            logThisState(\"purchaseSubscription: calling create3DSecureIframe, url=\", response.data.return_url_for_3ds);\n            response = await create3DSecureIframe(response.data.return_url_for_3ds);\n            logThisState(\"purchaseSubscription: create3DSecureIframe called, new response2=\", response);\n            // debugger;\n        }\n\n        // cpState.newSubData will be used at:\n        // - upgradeOffer\n        // - startOnboarding\n        cpState.newSubData = response.data;\n        logThisState(\"purchaseSubscription: window.newSubsData is set\", JSON.stringify(response));\n        // debugger;\n\n        if (response && response.data && response.data.token) {\n            logThisState(\"purchaseSubscription: found token in new subscription\");\n            showSuccessPopup(response.data.token);\n\n            // debugger; // L890\n            if (!response.data.sessionid) {\n                response.data.sessionid = response.data.session_id;\n            }\n            if (!response.data.sessionid) {\n                response.data.sessionid = window.epSubs.getAllUrlParams().sessionid;\n            }\n            if (!response.data.sessionid) {\n                response.data.sessionid = \"set-forcefully-in-purchaseSubscription-DE-202305\";\n            }\n            window.ep.pipaId.refreshCookies(response.data);\n            // debugger;\n\n        } else {\n            logThisState(\"purchaseSubscription: there is no token in new subscription, \" +\n                \"OPTIONAL consider if this returned error for some reason\");\n            showSuccessPopup(false);\n        }\n\n        // prepare tracking information\n        let planData = cpState.selectedPlanDescription.planId;\n        planData += (window.epCheckoutParams.cf_plan_after_trial_ends) ? \"--\" + window.epCheckoutParams.cf_plan_after_trial_ends : \"\";\n\n        let safeData = cpState.checkoutData;\n        safeData.card = \"hidden\";\n\n        let conversionEvent = \"Conversion Digital Paid Subscription\";\n        if (cpState.selectedPlanDescription.planType === \"video\") {\n            conversionEvent = \"Conversion Video Paid Subscription\";\n        }\n        window.epSubs.trackDataEvent(\n            {\n                abtest_id: $.cookie('digital_subscription_tracking_abtest_id') || \"\",\n                user_id: $.cookie('epoch_user_id'),\n                category: conversionEvent,\n                action: planData,\n                label: cpState.newSubData.subscription_key,\n                \"src_cat\": window.epCheckoutParams.src_cat,\n                \"src_tmp\": window.epCheckoutParams.src_tmp,\n                \"src_url\": window.epCheckoutParams.src_url,\n                \"src_cmp\": window.epCheckoutParams.src_cmp,\n                metadata: window.checkoutEngineVersion,\n                page: window.location.href,\n                real_url: window.epCheckoutParams.src_url,\n                canonical_url: window.epCheckoutParams.src_url,\n                value: cpState.offerDetail.offer_detail.plan.price,\n                json_data: JSON.stringify({\n                    subsData: cpState.newSubData,\n                    params: window.epCheckoutParams,\n                    checkoutData: safeData,\n                    email: safeData.customer.email,\n                }),\n            }\n        );\n        window.epSubs.trackGAEvent(\n            \"paywall:Conversion Paid Subscription\",\n            planData,\n            cpState.newSubData.subscription_key,\n        );\n        window.epSubs.trackGAEvent(\n            \"paywall:Checkout Process\",\n            \"Checkout Success\",\n        );\n        window.epSubs.trackGAPageview(\n            \"/virtual/goals/paid-subscription/\" + planData + \"/\" + cpState.newSubData.subscription_key,\n        );\n\n    } catch (err) {\n        logThisState(\"purchaseSubscription: caught an error\", err);\n        $('.loading-throbber-wrapper').hide();\n        $('#purchase-btn').show();\n        $('#checkout-form').find(':input[type=submit]').prop('disabled', false);\n        let res = err.responseText,\n            statusText = err.statusText,\n            errorMsgKey = '';\n\n        if (statusText && statusText === \"Bad Gateway\") {\n            outputLocalizedText('.subscription-create-error', 'checkoutError');\n            ga('send', 'event', 'Digital Checkout Page', 'errlog:purchaseSubscription', 'Unable to checkout, please verify that your payment details are correct.');\n        } else if (res) {\n            if (res.includes('AVS check failed')) {\n                errorMsgKey = 'subscriptionPurchaseError';\n            } else if (res.includes('Prepaid cards are not supported')) {\n                errorMsgKey = 'prepaidCardError';\n            } else {\n                errorMsgKey = 'checkoutErrorWithSupport';\n            }\n            outputLocalizedText('.subscription-create-error', errorMsgKey);\n            ga('send', 'event', 'Digital Checkout Page', 'errlog:purchaseSubscription', err.responseText);\n        } else {\n            outputLocalizedText('.subscription-create-error', 'checkoutError');\n            ga('send', 'event', 'Digital Checkout Page', 'errlog:purchaseSubscription', 'Unable to checkout, please verify that your payment details are correct.');\n        }\n    }\n}\n\n// interface ThreeDSecureResponse {\n//     status: string;\n// }\n\n// interface Create3DSecureIframeOptions {\n//     onError?: (error: Error) => void;\n//     timeout?: number;\n// }\n\n/**\n * @param returnUrlFor3DS\n * sample: https://hooks.stripe.com/3d_secure_2/hosted?merchant=acct_1HpXGBBkvvoYiDHG&publishable_key=pk_test_...\n */\nfunction create3DSecureIframe(\n    returnUrlFor3DS: string\n): Promise<string> {\n    const timeout = 30 * 60 * 1000; // 30 minutes, after this time the iframe will be closed.\n    logThisState(\"create3DSecureIframe: called, returnUrlFor3DS=\", returnUrlFor3DS);\n\n    return new Promise((resolve, reject) => {\n        // Create an iframe for 3D Secure authentication.\n        const iframe = document.createElement('iframe');\n        iframe.src = returnUrlFor3DS;\n        iframe.id = 'stripe-3ds-iframe-fullscreen';\n        iframe.style.cssText = `position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: 9999; border: none`;\n        document.body.appendChild(iframe);\n\n        // Set a timer for handling timeouts.\n        const timer = setTimeout(() => {\n            removeIframeAndListener();\n            handleError(new Error('3D Secure authentication timed out.'));\n        }, timeout);\n\n        // Listen for localizedMessages from the iframe.\n        window.addEventListener('message', messageHandler);\n\n        // Handle the received message from the iframe.\n        function messageHandler(event: MessageEvent) {\n\n            try {\n\n                logThisState(\"messageHandler: message from Stripe received, event=\", JSON.stringify(event));\n\n                // Add the allowed origins for Stripe events in an array\n                const allowedOrigins = [\n                    \"https://hooks.stripe.com\",\n                    \"https://testmode-acs.stripe.com\",\n                    \"https://ds-etd-static.test\",\n                    \"https://static.epochtimes.de\",\n                ];\n\n                if (!allowedOrigins.includes(event.origin)) {\n                    logThisState(\"messageHandler: message from Stripe received, but origin is not expected\" +\n                        \" expectedOrigins: \" + JSON.stringify(allowedOrigins) +\n                        \" eventOrigin: \" + event.origin);\n                    return;\n                }\n\n                // debugger; // check subscriptionJsonData\n                if (!event) return;\n                const eventData = event.data;\n                logThisState(\"messageHandler: message from Stripe received, event.data=\", eventData);\n\n                if (!eventData) return;\n                // if eventData does not start with subscriptionKey=, then return\n                if (!(\"\" + eventData).startsWith(\"subscriptionJsonData=\")) return;\n                // \"subscriptionJsonData={\\\"status\\\":\\\"subscription\\\",\\\"data\\\":{\\\"subscription_key\\\":\\\"SRtgNfxSDhekhS7cqag5==\\\",\\\"token\\\":\\\"\\\"}}\"\n\n                // extract the subscriptionJsonData from eventData\n                const subscriptionJsonData = (\"\" + eventData).replace(\"subscriptionJsonData=\", \"\");\n                logThisState(\"messageHandler: message from Stripe received, subscriptionJsonData=\", subscriptionJsonData);\n                if (subscriptionJsonData === \"rejected\") {\n                    removeIframeAndListener();\n                    handleError(new Error('Payment failed.'));\n                }\n\n                // debugger; // L1057\n                const subscriptionJsonDataObj = JSON.parse(subscriptionJsonData);\n                logThisState(\"messageHandler: message from Stripe received, subscriptionJsonDataObj=\", subscriptionJsonDataObj);\n\n                clearTimeout(timer);\n                logThisState(\"messageHandler: clearTimeout called to remove the timer\");\n\n                removeIframeAndListener();\n                logThisState(\"messageHandler: removeIframeAndListener called to remove the iframe and listener\");\n\n                // debugger; // check what happens on resolve\n                resolve(subscriptionJsonDataObj);\n\n                // logThisState(\"messageHandler: eventData.status is not 'success', handling error with eventData.status:\", eventData.status);\n                // handleError(new Error(`3D Secure authentication failed or was canceled. Status: ${eventData.status}`));\n\n            } catch (error) {\n                // debugger;\n                logThisState(\"messageHandler: error=\", error);\n                handleError(new Error(`3D Secure authentication failed or was canceled. Status: ${event}`));\n                return;\n            }\n        }\n\n        // Remove the iframe and event listener.\n        function removeIframeAndListener() {\n            logThisState(\"messageHandler: removeIframeAndListener\");\n            window.removeEventListener('message', messageHandler);\n            document.body.removeChild(iframe);\n        }\n\n        // Handle errors.\n        function handleError(error: Error) {\n            logThisState(\"messageHandler: handleError called, error=\", error);\n            reject(error);\n        }\n    });\n}\n\n\nasync function purchaseForExistingCustomer() {\n\n    logThisState(\"purchaseForExistingCustomer: is called!\");\n\n    try {\n        cpState.existingSubData = await subscriptionAPIs.createSubsForExistingCustomer();\n        logThisState(\"purchaseForExistingCustomer subscriptionAPIs.createSubsForExistingCustomer() result:\", cpState.existingSubData);\n        console.log('createSubsForExistingCustomer', cpState.existingSubData);\n\n        showSuccessPopup(false);\n\n        try {\n            let planData = cpState.selectedPlanDescription.planId;\n            planData += (window.epCheckoutParams.cf_plan_after_trial_ends) ? \"--\" + window.epCheckoutParams.cf_plan_after_trial_ends : \"\";\n\n            let conversionEvent = \"Conversion Digital Paid Subscription\";\n            if (cpState.selectedPlanDescription.planType === \"video\") {\n                conversionEvent = \"Conversion Video Paid Subscription\";\n            }\n            window.epSubs.trackDataEvent(\n                {\n                    abtest_id: $.cookie('digital_subscription_tracking_abtest_id') || \"\",\n                    user_id: $.cookie('epoch_user_id'),\n                    category: conversionEvent,\n                    action: planData,\n                    label: \"\",\n                    \"src_cat\": window.epCheckoutParams.src_cat,\n                    \"src_tmp\": window.epCheckoutParams.src_tmp,\n                    \"src_url\": window.epCheckoutParams.src_url,\n                    \"src_cmp\": window.epCheckoutParams.src_cmp,\n                    metadata: window.checkoutEngineVersion,\n                    // page: window.location.href,\n                    real_url: window.epCheckoutParams.src_url,\n                    canonical_url: window.epCheckoutParams.src_url,\n                    page: window.epCheckoutParams.src_url,\n                    json_data: JSON.stringify({\n                        subsData: cpState.existingSubData,\n                        params: window.epCheckoutParams,\n                        // checkoutData: safeData,\n                        // email: safeData.customer.email,\n                    }),\n                }\n            );\n            window.epSubs.trackGAEvent(\n                \"paywall:Conversion Paid Subscription\",\n                planData,\n                cpState.existingSubData.subscription_key,\n            );\n            window.epSubs.trackGAEvent(\n                \"paywall:Checkout Process\",\n                \"Checkout Success\",\n            );\n            window.epSubs.trackGAPageview(\n                \"/virtual/goals/paid-subscription/\" + planData + \"/\" + cpState.existingSubData.subscription_key,\n            );\n        } catch (e) {\n            console.log(\"exception-1089\", e);\n        }\n    } catch (response) {\n        console.log(\"Line 1161:\", response);\n        $('.loading-throbber-wrapper').hide();\n        $('#purchase-btn').show();\n        $('#checkout-form').find(':input[type=submit]').prop('disabled', false);\n\n        // $('.existing-subscription-create-error').text('Unable to checkout, please try logging out or contacting our customer service.');\n        outputLocalizedText('.existing-subscription-create-error', 'checkoutErrorLogoutOrContact');\n        ga('send', 'event', 'Digital Checkout Page', 'errlog:purchaseSubscriptionExistingCustomer', JSON.stringify(response));\n    }\n}\n\n\nfunction showSuccessPopup(newUserToken: string | boolean) {\n\n    // debugger;\n\n    // Execute all success callbacks\n    console.log('callbackCheckoutSuccess', window.callbackCheckoutSuccess);\n    if (window.callbackCheckoutSuccess && window.callbackCheckoutSuccess.length > 0) {\n        for (let idx in window.callbackCheckoutSuccess) {\n            if (typeof window.callbackCheckoutSuccess[idx] == \"function\") {\n                try {\n                    window.callbackCheckoutSuccess[idx]();\n                } catch (e) {\n                    console.log(\"exception-1118\", e);\n                }\n            }\n        }\n    }\n\n\n    // debugger;\n\n    let $successPopup = $('#successPopup');\n    $successPopup.appendTo('body');\n    $('.loading-throbber-wrapper').hide();\n    $('#purchase-btn').show();\n    $successPopup.modal('show');\n\n    setCookie('epoch_subscribed', cpState.selectedPlanDescription.planId, 1);\n\n    $('#continue-reading, .continue-reading').on('click',\n        function (e) {\n            continueReadingRedirect();\n        });\n\n    trackReferralInfo();\n\n    // debugger;\n    logThisState(\"showSuccessPopup: newUserToken=\", newUserToken);\n    logThisState(\"showSuccessPopup: cpState.customerData.token=\", cpState.customerData.token);\n    logThisState(\"showSuccessPopup: cpState.isLoggedIn=\", cpState.isLoggedIn);\n    logThisState(\"showSuccessPopup: cpState=\", cpState);\n\n    // debugger; // L1215\n    if (cpState.isLoggedIn || !newUserToken) { // debugger;\n        let $setpw = $('#setpw-form #ymkpassword');\n        $setpw.hide();\n        $setpw.removeAttr('required');\n        $('#setpw-form').on('submit', function (e) {\n            // debugger;\n            e.preventDefault();\n            handleSurveySubmit(cpState.customerData.token);\n            return false;\n        });\n    } else {\n        // debugger; // L1232\n        $('#ymkpassword').trigger('focus');\n        $('#setpw-form').on('submit', function (e) {\n            e.preventDefault();\n            handlePasswordChange(newUserToken as string);\n            return false;\n        });\n    }\n}\n\nfunction continueReadingRedirect() {\n    logThisState(\"continueReadingRedirect: called\");\n    if (window.epCheckoutParams.return_url) {\n        let url = window.epCheckoutParams.return_url;\n        if (url.substr(0, 1) === \"/\") {\n            url = \"https://theepochtimes.com\" + url;\n        }\n        window.location.replace(url);\n    } else if (window.extractedURLParams.cf_source_page_url) {\n        let url = decodeURIComponent(window.extractedURLParams.cf_source_page_url);\n        if (url.includes('www.theepochtimes.com')) {\n            if (cpState.selectedPlanDescription.planType === \"video\") {\n                window.location.replace('https://www.theepochtimes.com/epochtv');\n            } else {\n                window.location.replace('https://www.theepochtimes.com/');\n            }\n        } else {\n            window.location.replace('https://www.theepochtimes.com/');\n        }\n    } else {\n        if (cpState.selectedPlanDescription.planType == \"video\") {\n            window.location.replace('https://www.theepochtimes.com/epochtv');\n        } else {\n            window.location.replace('https://www.theepochtimes.com/');\n        }\n    }\n}\n\nfunction validatePassword(userInput: string) {\n    let requirements = /(?=.{5,32}).*/;\n    return requirements.test(userInput);\n}\n\nasync function handlePasswordChange(newUserToken: string) {\n    let password = $('#setpw-form #ymkpassword').val(),\n        data = {\n            password: password,\n            confirmpassword: password\n        };\n\n    // validation stuff\n    const form = $('#setpw-form');\n    form.removeClass('was-validated');\n\n    $(\"#setpw-form input\").each(function () {\n        $(this).removeClass(\"is-invalid\");\n    });\n\n    if (!validatePassword(($(\"#ymkpassword\", form).val() as string))) {\n        $(\"#ymkpassword\", form).addClass(\"is-invalid\");\n        $(\"#ymkpassword\", form)[0].scrollIntoView();\n        return;\n    }\n    // end\n\n    try {\n        await subscriptionAPIs.changePassword(data, newUserToken);\n    } catch (error) {\n        ga('send', 'event', 'Digital Checkout Page', 'Unsuccessful password update', error);\n    } finally {\n        handleSurveySubmit(newUserToken);\n    }\n}\n\nasync function handleSurveySubmit(token: string) {\n    let siteId = window.configSiteID;\n    // debugger; // inside handleSurveySubmit\n\n    // validation\n    const form = $('#setpw-form');\n    form.removeClass('was-validated');\n\n    $(\"#setpw-form input\").each(function () {\n        $(this).removeClass(\"is-invalid\");\n    });\n\n    if (!$('#success_survey_answer').val()) {\n        $(\"#success_survey_answer\", form).addClass(\"is-invalid\");\n        $(\"#success_survey_answer\", form)[0].scrollIntoView();\n        return;\n    }\n    // end\n\n    $('#setpw-form #create-password-btn').hide();\n    $('#setpw-form .loading-throbber-wrapper').fadeIn('fast');\n\n    try {\n\n        // debugger; // inside try block\n        let surveyResponse = $('#success_survey_answer').val(),\n            surveyData = {\n                'response': surveyResponse\n            },\n            data = {\n                site: siteId,\n                email: $('#email').val(),\n                survey: JSON.stringify(surveyData)\n            };\n\n\n        // debugger; // send results to aitest.youmaker.com\n        await $.ajax({\n            method: \"POST\",\n            type: \"POST\",\n            url: `https://aitest.youmaker.com/survey/save?token=${token}`,\n            contentType: \"application/json\",\n            dataType: \"json\",\n            data: JSON.stringify(data),\n            success: function (response) {\n                console.log('send survey response success: ', response);\n                return;\n            },\n            error: function (response) {\n                console.log('send survey response fail: ', response);\n                return;\n            }\n        });\n\n    } catch (e) {\n        ga('send', 'event', 'Digital Checkout Page', 'Unsuccessful survey response send', e);\n    } finally {\n        try {\n            let fields = {\n                subscription_key: cpState.newSubData && cpState.newSubData.subscription_key,\n                answer: $('#success_survey_answer').val()\n            }\n\n            // debugger; // do this in finally level 1\n            let urlSaveChannelSource = window.configConductorUrl + 'save_referrer_sub_channels' + `?site_id=${siteId}`;\n            logThisState(\"handleSurveySubmit: urlSaveChannelSource=\" + urlSaveChannelSource + \" fields=\", JSON.stringify(fields));\n\n            // make an ajax call with form data from fields\n            await $.ajax({\n                method: \"POST\",\n                type: \"POST\",\n                url: urlSaveChannelSource,\n                contentType: \"application/json\",\n                dataType: \"json\",\n                data: JSON.stringify(fields),\n                success: function (response) {\n                    logThisState('handleSurveySubmit: send survey response success: ', response);\n                    handleSuccessPageRedirect();\n                },\n                error: function (response) {\n                    logThisState('handleSurveySubmit: send survey response fail: ', response);\n                    handleSuccessPageRedirect();\n                }\n            });\n\n            // handleSuccessPageRedirect();\n        } catch (e) {\n            ga('send', 'event', 'Print Checkout Page', 'Unsuccessful survey response send', e);\n            // handleSuccessPageRedirect();\n        } finally {\n            // debugger; // do this in finally level 2\n            if (typeof window.actionAfterThankYou == \"function\") {\n                try {\n                    // debugger; // before window.actionAfterThankYou();\n                    window.actionAfterThankYou();\n                } catch (e) {\n                    // debugger; // in catch\n                    continueReadingRedirect();\n                }\n            } else {\n                // debugger; // continue in else\n                continueReadingRedirect();\n            }\n        }\n    }\n}\n\nfunction handleSuccessPageRedirect() {\n    top.window.location.href = \"https://dev-profile.epochtimes.de/de/?start=on-boarding\";\n}\n\n/**\n * set up the capture of user data for each relevant input field\n */\nfunction setupBehaviourTracking() {\n    window.fieldBackup = {}\n\n    // when email is filled out, we call an async operation to check how valid that email is\n    // if it is valid then we start a purchase cart jouney, so we can remind people to check back\n    $('#checkout-form [name=\"email\"]').focusout(() => {\n        // captureCheckoutEvent('1. email field completed', '#checkout-form [name=\"email\"]');\n        let email = $('#checkout-form [name=\"email\"]').val() || \"\";\n        $.ajax({\n            type: \"POST\",\n            url: \"https://subscribe.theepochtimes.com/api/email.php?action=verify\",\n            data: {\n                email: email,\n                emailoversight: false\n            },\n            dataType: 'json',\n            success: function (response) {\n                logThisState(\"setupBehaviourTracking: success verifying email: \" + email + \", got response\", response)\n                if (response.valid) {\n                    // TODO this seems to be called rather often here\n                    // debugger;\n                    // addToAbandonedCartJourney(email as string);\n                }\n            },\n            error: function (response) {\n                logThisState(\"setupBehaviourTracking: error verifying email: \" + email + \", got response\", response)\n            }\n        });\n    });\n\n    // capture user events on a timeout if during that timeout the value does not change, so we don't overload the server\n    // $('#checkout-form [name=\"customer_fname\"]').focusout(() => {\n    //     captureCheckoutEvent('3. first name field completed', '#checkout-form [name=\"customer_fname\"]')\n    // });\n    // $('#checkout-form [name=\"customer_lname\"]').focusout(() => {\n    //     captureCheckoutEvent('4. last name field completed', '#checkout-form [name=\"customer_lname\"]')\n    // });\n    // $('#checkout-form [name=\"zip\"]').focusout(() => {\n    //     captureCheckoutEvent('9. zip field completed', '#checkout-form [name=\"zip\"]')\n    // });\n    // $('#checkout-form [name=\"card_number\"]').focusout(() => {\n    //     captureCheckoutEvent('10. card field completed', '#checkout-form [name=\"card_number\"]')\n    // });\n    // $('#checkout-form [name=\"expiry\"]').focusout(() => {\n    //     captureCheckoutEvent('11. expiry field completed', '#checkout-form [name=\"expiry\"]')\n    // });\n    // $('#checkout-form [name=\"cvv\"]').focusout(() => {\n    //     captureCheckoutEvent('12. cvv field completed', '#checkout-form [name=\"cvv\"]')\n    // });\n\n}\n\nwindow.UpgradeOffer = {\n    start: function () {\n        // debugger; // inside start\n        const forceOnboarding = true;\n        if (forceOnboarding) {\n            // console.log(\"----------- Btest UpgrateOffer 1\");\n            this.startOnboarding();\n            return;\n        }\n        let subs_id = false;\n        if (cpState.newSubData && cpState.newSubData.subscription_key) {\n            subs_id = cpState.newSubData.subscription_key;\n        } else if (cpState.existingSubData && cpState.existingSubData.subscription_key) {\n            subs_id = cpState.existingSubData.subscription_key;\n        }\n\n        if ((cpState.selectedPlanDescription.planType === \"video\" || cpState.selectedPlanDescription.planType === \"digital\")\n            && cpState.selectedPlanDescription.planPeriodUnit !== \"year\" && subs_id) {\n            // Register hook for final redirect\n            window.addEventListener(\"message\", function (message) {\n                try {\n                    let data = JSON.parse(message.data);\n                    if (data.module === \"CHECKOUT\" && data.action === \"REDIRECT\") {\n                        continueReadingRedirect();\n                    }\n                } catch (e) {\n                }\n            }, false);\n\n            let upgradeTemplateId = \"e1d7892d-5878-41e3-9c21-fd856153f027\";\n            if (cpState.selectedPlanDescription.planType === \"video\") {\n                upgradeTemplateId = \"e8fa5618-82f9-4954-a3dc-65b845873e54\";\n            }\n\n            $('.thankyou-simple').remove();\n            window.parent.postMessage(JSON.stringify({\n                module: \"GENERAL\",\n                action: \"POPUP\",\n                data: {\n                    width: \"800px\",\n                    height: \"650px\",\n                    hideCloseBtn: true,\n                    template: {\n                        id: upgradeTemplateId,\n                        data: {\n                            subscription_key: subs_id,\n                            sourceTemplate: window.checkoutEngineVersion,\n                            originalPlan: cpState.selectedPlanDescription.planId\n                        }\n                    },\n                }\n            }), \"*\");\n\n\n        } else {\n            continueReadingRedirect();\n            return;\n        }\n    },\n\n    startOnboarding: function (subs_id: string) {\n\n        // debugger; // inside startOnboarding\n        if (cpState.newSubData && cpState.newSubData.subscription_key) {\n            subs_id = cpState.newSubData.subscription_key;\n        } else if (cpState.existingSubData && cpState.existingSubData.subscription_key) {\n            subs_id = cpState.existingSubData.subscription_key;\n        } else {\n            subs_id = subs_id ? subs_id : '';\n        }\n        let subs_email = (cpState.checkoutData.customer && cpState.checkoutData.customer.email) || cpState.customerData.email;\n        console.log(\"startOnboarding: - subs_id @startOnboarding: \", subs_id);\n        // return;\n\n        // VIDEO non-yearly sub\n        if (cpState.selectedPlanDescription.planType === \"video\" && cpState.selectedPlanDescription.planPeriodUnit !== \"year\" && subs_id) {\n            window.addEventListener(\"message\", function (message) {\n                try {\n                    let data = JSON.parse(message.data);\n                    if (data.module === \"CHECKOUT\" && data.action === \"REDIRECT\") {\n                        continueReadingRedirect();\n                    }\n                } catch (e) {\n                }\n            }, false);\n            $('.thankyou-simple').remove();\n            window.parent.postMessage(JSON.stringify({\n                module: \"GENERAL\",\n                action: \"POPUP\",\n                data: {\n                    width: \"800px\",\n                    height: \"650px\",\n                    hideCloseBtn: true,\n                    template: {\n                        id: \"e8fa5618-82f9-4954-a3dc-65b845873e54\",\n                        data: {\n                            subscription_key: subs_id,\n                            sourceTemplate: window.checkoutEngineVersion,\n                            originalPlan: cpState.selectedPlanDescription.planId\n                        }\n                    },\n                }\n            }), \"*\");\n        } else if (cpState.selectedPlanDescription.planType === \"digital\" && subs_id) {\n\n            // DIGITAL sub\n            window.addEventListener(\"message\", function (message) {\n                console.log(\"startOnboarding: - processing redirect L1626\", message);\n                try {\n                    let data = JSON.parse(message.data);\n                    if (data.module === \"CHECKOUT\" && data.action === \"REDIRECT\") {\n                        console.log(\"startOnboarding: @onBoarding here 1....\");\n                        // return;\n                        continueReadingRedirect();\n                    }\n                } catch (e) {\n                    console.error(\"startOnboarding: event listener error L1635\", e);\n                }\n            }, false);\n\n            // https://subs.epochbase.eu/lib/api.bundle.js?execute=false&track=false&useSameDomain=true\n            let templateParameters = {\n                subscription_key: subs_id,\n                sourceTemplate: window.checkoutEngineVersion,\n                originalPlan: cpState.selectedPlanDescription.planId,\n                // offerAnnualUpgrade: (cpState.selectedPlanDescription.planPeriodUnit !== \"year\") ? true : false,\n                offerAnnualUpgrade: false,\n                userEmail: subs_email,\n                defaultLists: \"XvIFJS6Zcw\",\n                digital: true,\n                planType: cpState.selectedPlanDescription.planType,\n            };\n            // debugger; // look into showTemplate\n            window.epSubs.showTemplate(\"80158ba8-d2f1-4dec-834b-0b8c7f694fd0\", 'POPUP', {\n                height: \"100%\",\n                width: \"100%\",\n                hideCloseBtn: true,\n                version: 1\n                // version: (Math.random() > 0.4) ? 3 : 1\n            }, templateParameters);\n            console.log(\"startOnboarding: window.epSubs.showTemplate is called with parameters: \", templateParameters);\n        } else {\n            console.log(\"startOnboarding: type is not matched cpState.selectedPlanDescription.planType: \",\n                cpState.selectedPlanDescription.planType,\n                \" subs_id: \", subs_id);\n            window.addEventListener(\"message\", function (message) {\n                console.log(\"startOnboarding: - processing redirect L1662\", message);\n            });\n\n            continueReadingRedirect();\n            return;\n        }\n    }\n}\n\nasync function getEmailSecureToken(email: string) {\n    return $.ajax({\n        method: 'GET',\n        url: 'https://subsapi.epoch.cloud/get_email_secure_token?days_expire=30&email=' + encodeURIComponent(email),\n        dataType: 'json'\n    });\n}\n\nfunction trackReferralInfo() {\n    try {\n        let st = window.epSubs.getAllUrlParams(window.epSubs.getAllUrlParams().pl).st;\n        if (st && cpState.checkoutData && cpState.checkoutData.customer && cpState.checkoutData.customer.email) {\n            console.log('recordSuccessfulReferralSubscription');\n            $.ajax({\n                url: 'https://subsapi.epoch.cloud/referral/accept?referral_type=digital&share_token=' + encodeURIComponent(st) + '&email=' + encodeURIComponent(cpState.checkoutData.customer.email),\n                dataType: 'json',\n                method: 'GET',\n            })\n        }\n    } catch (e) {\n        console.log(\"exception-2086\", e);\n    }\n}\n\nexport const subscriptionAPIs = {\n    conductorHostUrl: window.configConductorUrl,\n    userHostUrl: window.configUserHostUrl,\n    siteID: window.configSiteID,\n\n\n    registerUser: async function (data: any) {\n        return $.ajax({\n            type: \"POST\",\n            url: this.userHostUrl + \"registration?site=\" + this.siteID,\n            data: JSON.stringify(data),\n            contentType: 'application/json',\n            dataType: 'json',\n            success: function (res) {\n                ga('send', 'event', 'Digital Checkout Page', 'Create user success', JSON.stringify(res));\n            },\n            error: function (res) {\n                ga('send', 'event', 'Digital Checkout Page', 'Create user failure', JSON.stringify(res));\n            }\n        });\n    },\n\n    getUserInformation: async function () {\n        // debugger;\n        let url = this.userHostUrl + \"info?token=\" + cpState.customerData.token;\n        return $.ajax({\n            type: \"GET\",\n            url: url,\n            success: function (res) {\n                // debugger;\n                ga('send', 'event', 'Digital Checkout Page', 'Get user information success', JSON.stringify(res));\n            },\n            error: function (res) {\n                // debugger;\n                ga('send', 'event', 'Digital Checkout Page', 'Get user information failure', JSON.stringify(res));\n            }\n        });\n    },\n\n    getPaymentMethod: async function () {\n        // debugger;\n        let urlListCards = this.conductorHostUrl + \"list_card?token=\" + cpState.customerData.token\n            + \"&customer_id=\" + cpState.customerData.customer_id\n            + \"&site_id=\" + this.siteID;\n        logThisState(\"getPaymentMethod: urlListCards=\", urlListCards);\n        return $.ajax({\n            type: \"GET\",\n            url: urlListCards,\n            contentType: 'application/json',\n            dataType: \"json\",\n            success: function (res) {\n                logThisState(\"getPaymentMethod: Get payment list success!\", JSON.stringify(res));\n                ga('send', 'event', 'Digital Checkout Page', 'Get payment information success', JSON.stringify(res));\n            },\n            error: function (res) {\n                $('#payment-card .edit-subs-btn').hide();\n                ga('send', 'event', 'Digital Checkout Page', 'Get payment information failure', JSON.stringify(res));\n            }\n        });\n    },\n\n    getPlanDetails: function (plan_id: string) {\n        return $.ajax({\n            url: `${this.conductorHostUrl}retrieve_plan?siteid=${this.siteID}&planid=${plan_id}`,\n            method: \"GET\",\n            contentType: 'application/json',\n            dataType: \"json\",\n            success: function (res) {\n                console.log(res);\n                if (res.status === 'ok') {\n                    ga('send', 'event', 'Digital Checkout Page', 'Get plan information success', JSON.stringify(res));\n                    return res.data;\n                }\n            },\n            error: function (res) {\n                ga('send', 'event', 'Digital Checkout Page', 'Get plan information failure', JSON.stringify(res));\n                $('#purchase-btn').attr('disabled', 'disabled');\n            }\n        });\n    },\n\n    // This will fetch marketing localizedMessages realted to plan\n    getPlanDescription: function (plan_id: string) {\n        console.log('getPlanDescription');\n        return $.ajax({\n            url: 'https://subscribe.theepochtimes.com/api/productdescription.php?plan_id=' + plan_id,\n            method: \"GET\",\n            contentType: 'application/json',\n            dataType: \"json\",\n            success: function (res) {\n                console.log('Plan Description:', res);\n                return res;\n            },\n            error: function (res) {\n                console.log('error', res);\n                return {}\n            }\n        })\n\n    },\n\n    getExistingSubsInfo: async function (email: string) {\n\n        const url = `${this.conductorHostUrl}get_subsid?email=${encodeURIComponent(email)}&site_id=${this.siteID}`;\n        return $.ajax({\n            url: url,\n            method: \"GET\",\n            contentType: 'application/json',\n            dataType: \"json\",\n            success: function (response) {\n                console.log('getExistingSubsInfo: get subs id: ', response);\n            },\n            error: function (response) {\n                console.error(\"getExistingSubsInfo: url=\", url);\n                console.error(\"getExistingSubsInfo: response=\", response);\n            }\n        });\n    },\n\n    changePassword: function (data: any, newUserToken: string) {\n        return $.ajax({\n            type: \"POST\",\n            url: window.configUserHostUrl + `changepassword?token=${encodeURIComponent(newUserToken)}&site_id=${this.siteID}`,\n            data: data,\n            dataType: \"json\",\n            success: function (res) {\n                console.log(\"changePassword: success: res=\", res);\n                if (res.status === \"ok\") {\n                    ga('send', 'event', 'Digital Checkout Page', 'Successful password update', cpState.customerData.userid);\n                } else {\n                    ga('send', 'event', 'Digital Checkout Page', 'Unsuccessful password update', cpState.customerData.userid + ', error: ' + res);\n                }\n            },\n            error: function (res) {\n                console.log(\"changePassword: error: res=\", res);\n                ga('send', 'event', 'Digital Checkout Page', 'Unsuccessful password update', cpState.customerData.userid + ', error: ' + res);\n            }\n        });\n    },\n\n    requestResetPassword: function (email: string) {\n        const reseturl = 'https://www.theepochtimes.com?pipa_reset_password=';\n\n        return $.ajax({\n            url: `${this.userHostUrl}resetpassword?site=${this.siteID}&email=${encodeURIComponent(email)}&reseturl=${reseturl}`,\n            method: \"POST\",\n            contentType: 'application/json',\n            dataType: 'json',\n            success: function (res) {\n                console.log('reset password success: ', res);\n            },\n            error: function (error) {\n                console.log('reset password error: ', error);\n            }\n        })\n    },\n\n    createSubscriptionUsingOfferAndCreditCard: function (recaptchaToken: string) {\n\n        logThisState(\"createSubscriptionUsingOfferAndCreditCard: cpState.checkoutData=\", cpState.checkoutData);\n\n        // activate test functions\n        const injectionValue = $.cookie('test-sample-injection');\n        const injectionParameter = injectionValue ? `&injectionCommand=${injectionValue}` : '';\n\n        const hostNameFor3DS = window.location.hostname;\n\n        //  `${this.conductorHostUrl}create_subscription_using_offer?site_id=${this.siteID}${injectionParameter}&recaptcha=${recaptchaToken}`,\n        let apiUrl = `${this.conductorHostUrl}create_subscription_using_offer`;\n        apiUrl += `?site_id=${this.siteID}`;\n        apiUrl += `&hostNameFor3DS=${hostNameFor3DS}`;\n        apiUrl += `${injectionParameter}`;\n        apiUrl += `&recaptcha=${recaptchaToken}`;\n\n        logThisState(\"createSubscriptionUsingOfferAndCreditCard: apiUrl=\", apiUrl);\n\n        return $.ajax({\n            url: apiUrl,\n            // url: `https://subsapi-dev.epoch.cloud/chargebee/create_subscription?siteid=${this.siteID}&recaptcha=${cpState.recaptchaToken}`,\n            method: \"POST\",\n            type: \"POST\",\n            contentType: \"application/json\",\n            dataType: \"json\",\n            data: JSON.stringify(cpState.checkoutData),\n            success: function (res) {\n                console.log('createSubscriptionUsingOfferAndCreditCard result', res);\n                if (res.status === 'ok') {\n                    ga('send', 'event', 'Digital Checkout Page', 'SUCCESS - purchaseSubscription');\n                } else {\n                    try {\n                        window.epSubs.trackDataEvent({\n                            \"abtest_id\": ($ as any).cookie('digital_subscription_tracking_abtest_id') || \"\",\n                            \"user_id\": ($ as any).cookie('epoch_user_id'),\n                            \"category\": 'ERROR Digital Subscription Checkout',\n                            \"action\": 'createSubscriptionUsingOfferAndCreditCard status != ok',\n                            \"label\": '',\n                            \"src_cat\": window.epCheckoutParams.src_cat,\n                            \"src_tmp\": window.epCheckoutParams.src_tmp,\n                            \"src_url\": window.epCheckoutParams.src_url,\n                            \"src_cmp\": window.epCheckoutParams.src_cmp,\n                            \"value\": '',\n                            metadata: window.checkoutEngineVersion,\n                            \"page\": window.location.href,\n                            \"canonical_url\": window.epCheckoutParams.src_url,\n                            \"real_url\": window.epCheckoutParams.src_url,\n                            \"json_data\": JSON.stringify({\n                                params: window.epCheckoutParams,\n                                checkoutEngineVersion: window.checkoutEngineVersion,\n                                response: res,\n                                checkoutData: cpState.checkoutData\n                            })\n                        });\n                    } catch (e) {\n                        console.log(\"exception-1716\", e);\n                    }\n                }\n            },\n            error: function (res) {\n                ga('send', 'event', 'Digital Checkout Page', 'ERROR - purchaseSubscription');\n                try {\n                    window.epSubs.trackDataEvent({\n                        \"abtest_id\": ($ as any).cookie('digital_subscription_tracking_abtest_id') || \"\",\n                        \"user_id\": ($ as any).cookie('epoch_user_id'),\n                        \"category\": 'ERROR Digital Subscription Checkout',\n                        \"action\": 'createSubscriptionUsingOfferAndCreditCard error response',\n                        \"label\": '',\n                        \"src_cat\": window.epCheckoutParams.src_cat,\n                        \"src_tmp\": window.epCheckoutParams.src_tmp,\n                        \"src_url\": window.epCheckoutParams.src_url,\n                        \"src_cmp\": window.epCheckoutParams.src_cmp,\n                        \"value\": '',\n                        metadata: window.checkoutEngineVersion,\n                        \"page\": window.location.href,\n                        \"canonical_url\": window.epCheckoutParams.src_url,\n                        \"real_url\": window.epCheckoutParams.src_url,\n                        \"json_data\": JSON.stringify({\n                            params: window.epCheckoutParams,\n                            checkoutEngineVersion: window.checkoutEngineVersion,\n                            response: res,\n                            checkoutData: cpState.checkoutData\n                        })\n                    });\n                } catch (e) {\n                    console.log(\"exception-1746\", e);\n                }\n            }\n        });\n    },\n\n\n    createSubsForExistingCustomer: function () {\n        let subData = {\n            plan_id: cpState.selectedPlanDescription.planId,\n            meta_data: cpState.checkoutData.meta_data,\n            // meta_data: {\n            //     \"cf_plan_after_trial_ends\": \"3-month-$45-digital\",\n            //     \"cf_utm_campaign\": \"\",\n            //     \"cf_utm_source\": \"SupportEpoch.com\",\n            //     \"cf_utm_medium\": \"\",\n            //     \"cf_utm_term\": \"\",\n            //     \"cf_utm_content\": \"\",\n            //     \"cf_source_page_url\": \"\",\n            //     \"cf_impact_clickid\": \"1-day-5-dollar\"\n            // }\n        }\n        if (window.epCheckoutParams.plan_quantity) {\n            cpState.checkoutData.plan_quantity = window.epCheckoutParams.plan_quantity;\n        }\n\n        const hostName = window.location.hostname;\n        let apiUrl = `${this.conductorHostUrl}create_subscription_for_customer`;\n        apiUrl += `?site_id=${this.siteID}`;\n        apiUrl += `&hostName=${hostName}`;\n        apiUrl += `&token=${cpState.customerData.token}`;\n\n        if (cpState.customerData.customer_id) {\n            apiUrl = `${apiUrl}&customerid=${cpState.customerData.customer_id}`;\n        }\n        logThisState(\"createSubsForExistingCustomer: apiUrl\", apiUrl);\n        logThisState(\"createSubsForExistingCustomer: subData\", apiUrl);\n\n\n        return $.ajax({\n            method: \"POST\",\n            dataType: \"json\",\n            contentType: \"application/json\",\n            url: apiUrl,\n            data: JSON.stringify(subData),\n            success: function (res) {\n                ga('send', 'event', 'Digital Checkout Page', 'SUCCESS - purchaseSubscription for existing customer');\n            },\n            error: function (res) {\n                ga('send', 'event', 'Digital Checkout Page', 'ERROR - purchaseSubscription for existing customer');\n\n                try {\n                    window.epSubs.trackDataEvent({\n                        \"abtest_id\": ($ as any).cookie('digital_subscription_tracking_abtest_id') || \"\",\n                        \"user_id\": ($ as any).cookie('epoch_user_id'),\n                        \"category\": 'ERROR Digital Subscription Checkout',\n                        \"action\": 'createSubsForExistingCustomer error response',\n                        \"label\": '',\n                        \"src_cat\": window.epCheckoutParams.src_cat,\n                        \"src_tmp\": window.epCheckoutParams.src_tmp,\n                        \"src_url\": window.epCheckoutParams.src_url,\n                        \"src_cmp\": window.epCheckoutParams.src_cmp,\n                        \"value\": '',\n                        metadata: window.checkoutEngineVersion,\n                        \"page\": window.location.href,\n                        \"canonical_url\": window.epCheckoutParams.src_url,\n                        \"real_url\": window.epCheckoutParams.src_url,\n                        \"json_data\": JSON.stringify({\n                            params: window.epCheckoutParams,\n                            checkoutEngineVersion: window.checkoutEngineVersion,\n                            response: res,\n                            checkoutData: cpState.checkoutData\n                        })\n                    });\n                } catch (e) {\n                    console.log(\"exception-1802\", e);\n                }\n\n            }\n        });\n    },\n\n    setPaypalExpressCheckout: function (description: string) {\n        const isDev = true;\n        const currentUrl = encodeURIComponent(window.location.href)\n        const paypalParams = `&return_url=${currentUrl}&cancel_url=${encodeURIComponent('https://www.epochtimes.de')}&amount=${cpState.selectedPlanDescription.planPrice}&description=${encodeURIComponent(description)}&noshipping=true`;\n        const siteId = isDev ? 'de-dev.theepochtimes.com' : this.siteID;\n\n        return $.ajax({\n            method: \"POST\",\n            dataType: \"json\",\n            contentType: \"application/json\",\n            url: `${this.conductorHostUrl}paypal_express/set_express_checkout?siteId=${siteId}${paypalParams}`,\n            data: {}\n        });\n    },\n\n    createBillingAgreement: function (token: string) {\n        const isDev = true;\n        const siteId = isDev ? 'de-dev.theepochtimes.com' : this.siteID;\n        return $.ajax({\n            method: \"POST\",\n            dataType: \"json\",\n            contentType: \"application/json\",\n            url: `${this.conductorHostUrl}paypal_express/create_billing_agreement?siteId=${siteId}&token=${token}`\n        });\n    },\n\n    getBillingAgreementDetails: function (token: string) {\n        const isDev = true;\n        const siteId = isDev ? 'de-dev.theepochtimes.com' : this.siteID;\n        return $.ajax({\n            method: \"GET\",\n            dataType: \"json\",\n            contentType: \"application/json\",\n            url: `${this.conductorHostUrl}paypal_express/get_express_checkout_detail?siteId=${siteId}&token=${token}`\n        });\n    }\n}\n\n// export const subscriptionAPIs = subscriptionAPIs1;\n\n/**\n * call add_abandoned_cart_email with tracking information\n *\n * @param {string} email\n * @returns\n */\nfunction addToAbandonedCartJourney(email: string) {\n\n    // debugger;\n    // logThisState(\"addToAbandonedCartJourney: get query before setting\", ($ as any).cookie('epoch_abandoned_cart_journey'));\n    if (($ as any).cookie('epoch_abandoned_cart_journey')) {\n        console.log('Already in AC Journey.')\n        return;\n    }\n\n    // epoch_abandoned_cart_journey is true, expires in 6 days\n    // cookie is set on the theepochtimes.com domain and subdomains\n    // does not work on the local testing\n    setCookie('epoch_abandoned_cart_journey', true, 6);\n\n    // logThisState(\"addToAbandonedCartJourney: get query after setting\", ($ as any).cookie('epoch_abandoned_cart_journey'));\n\n    // assign random segment for possible AB testing inside journey\n    let segments = ['A', 'B', 'C', 'D'];\n    let segment = segments[Math.floor(Math.random() * segments.length)];\n\n    let planData = cpState.selectedPlanDescription.plan_id;\n    planData += (cpState.selectedPlanDescription.cf_plan_after_trial_ends) ? \"---\" + cpState.selectedPlanDescription.cf_plan_after_trial_ends : \"\";\n    // sample planData='digitalonly_fullsubscription_1usd_2month_trial---digitalonly_fullsubscription_9_99_monthly'\n\n    // set abandoned cart journey data\n    let acData = {\n        email: email,\n        user_id: ($ as any).cookie(\"epoch_user_id\"),\n        cp_type: (cpState.selectedPlanDescription.planType) ? cpState.selectedPlanDescription.planType : \"digital\",\n        url: window.location.href,\n        action: planData,\n        metadata: \"\",\n        segment: segment\n    }\n\n    try {\n        logThisState(\"addToAbandonedCartJourney: try to validate recaptcha\");\n        // call recaptcha, if successful call add_abandoned_cart_email with acData\n        grecaptcha.ready(function () {\n            grecaptcha.execute('6LcmJLkZAAAAAMziOnaFrJkOV4ClF_H8OvcqvlyE', {action: 'ac_email'}).then(function (captchaACtoken) {\n                try {\n                    let url = window.configSubsApiUrl + \"/add_abandoned_cart_email?recaptcha=\" + encodeURIComponent(captchaACtoken);\n                    logThisState(\"addToAbandonedCartJourney: recaptcha successful\");\n                    logThisState(\"addToAbandonedCartJourney: call url\", url);\n                    logThisState(\"addToAbandonedCartJourney: with data\", acData);\n                    $.ajax({\n                        type: \"POST\",\n                        dataType: \"json\",\n                        contentType: \"application/json\",\n                        url: url,\n                        data: JSON.stringify(acData),\n                        success: function (response) {\n                            // send it to /db/senddata\n                            window.epSubs.trackDataEvent({\n                                \"user_id\": ($ as any).cookie('epoch_user_id') || \"\",\n                                \"category\": 'Added to Digital Abandoned Cart Journey',\n                                \"action\": planData,\n                                \"label\": email,\n                                \"value\": '',\n                                \"metadata\": window.checkoutEngineVersion,\n                                \"page\": window.extractedURLParams.src_url,\n                                \"canonical_url\": window.extractedURLParams.src_url,\n                                \"real_url\": window.extractedURLParams.src_url,\n                                \"json_data\": JSON.stringify({\n                                    params: window.extractedURLParams,\n                                    checkoutEngineVersion: window.checkoutEngineVersion,\n                                    email: email\n                                })\n                            });\n                        },\n                        error: function (response) {\n                            logThisState(\"addToAbandonedCartJourney: error L593, email=\" + email + \" response=\",\n                                response\n                            );\n                            // debugger;\n                        }\n                    });\n                } catch (e) {\n                    logThisState(\"addToAbandonedCartJourney: error L602, exception=\", e);\n                    // debugger;\n                }\n            });\n        });\n    } catch (e) {\n        logThisState(\"addToAbandonedCartJourney: error L607, exception=\", e);\n        // debugger;\n    }\n}\n\nfunction getCookie(key: string) {\n    const result = ($ as any).cookie(key);\n    logThisState(\"getCookie: key=\" + key + ' result=', result);\n    return result;\n}\n\n/**\n * Note: this sets the cookie on the domain and subdomain of theepochtimes.com\n * Warning: it will not work for local testing\n *\n * @param {string} key\n * @param {object} value\n * @param {int} expires in days\n * @returns\n */\nexport function setCookie(key: string, value: boolean, expires: number) {\n    if (!($ as any).cookie) {\n        // logThisState(\"setCookie: ($ as any).cookie not defined\");\n        return false;\n    }\n    // logThisState(\"setCookie: set key \", key);\n    // logThisState(\"setCookie: set value \", value);\n    ($ as any).cookie(key, value, {\n        expires: expires,\n        domain: 'theepochtimes.com',\n        path: '/'\n    });\n}\n\n\nfunction handleExistingPayment(maskedNumber: string) {\n    $('#payment-using-hosted-field-integration').slideUp();\n    // slide up: We will create your new subscription with your stored payment method on file.\n    // Credit Card ending in:\n    $('#existing-card').slideDown();\n\n    // this is a link, and we can swap in braintree-payment with it,\n    // basically we just need to reverse the previous action\n    $('#show-braintree-payment').click(function (e) {\n        e.preventDefault();\n        $('#payment-using-hosted-field-integration').slideDown();\n        $('#existing-card').slideUp();\n    });\n\n    if (maskedNumber) {\n        // show paragraph: `Credit Card ending in:`\n        $('#card-info-line').show();\n        // set the last 4 digits\n        $('#last-four').empty().append(maskedNumber);\n    }\n}\n\n/**\n * Communicate with user that they already have a subscription\n * @param {string} subscription_type\n */\nfunction handleExistingSubscription(subscription_type: number) {\n    // debugger; // is this on the handleExistingSubscription\n    // hide customer name\n    $('#customer-name-container').slideUp();\n    // $('#customer-fname').parent().slideUp();\n    // $('#customer-lname').parent().slideUp();\n    // hide braintree integration\n    $('#payment-stripe').slideUp();\n    $('#payment-using-hosted-field-integration').slideUp();\n    // hide submit button\n    $('.cb-main-footer').slideUp();\n\n    logThisState(\"handleExistingSubscription: subscription_type\", subscription_type);\n    logThisState(\"handleExistingSubscription: cpState.isLoggedIn\", cpState.isLoggedIn); // debugger;\n\n    if (digital_prod_id.includes(subscription_type)) {\n        $('#checkout-form .loading-throbber-wrapper').hide();\n        if (cpState.isLoggedIn) { // debugger;\n            // shows info: We see that you already have a subscription with full digital access!\n            // In case you forgot your password, click here to request a reset password link.\n            $('#existing-sub').slideDown();\n            $('.read-footer').slideDown();\n            logThisState(\"handleExistingSubscription: show you have an existing subscription and you are logged in\");\n        } else {\n            // shows: You may have an active subscription already, please log into your account to complete this transaction.\n            $('#existing-sub-logged-out').slideDown();\n            const MSG_SHOW_EXISTING_SUBSCRIPTION_NOT_LOGGED_IN = \"handleExistingSubscription: show you have an existing subscription and you are NOT logged in\";\n            logThisState(MSG_SHOW_EXISTING_SUBSCRIPTION_NOT_LOGGED_IN);\n        }\n    }\n\n    $('#resetpw').on('click',\n        async function (e) {\n            e.preventDefault();\n            const checkoutData = cpState.checkoutData;\n            const customerData = cpState.customerData;\n            const email = (checkoutData.customer && checkoutData.customer.email) || customerData.email;\n            await subscriptionAPIs.requestResetPassword(email);\n            $('#reset-success').slideDown();\n        }\n    );\n\n    $('#go-to-eet').on('click',\n        function (e) {\n            e.preventDefault();\n            window.location.href = \"https://theepochtimes.com\";\n        }\n    );\n\n}\n\nfunction getMoneyString(amountInCents: number) {\n    if (amountInCents % 100 > 0) {\n        return (amountInCents / 100).toFixed(2);\n    } else {\n        return (amountInCents / 100).toString();\n    }\n}\n\nfunction isStripePaymentSelected() {\n    let gatewayFound = 2; // default gateway 2~STRIPE\n\n    if (cpState &&\n        cpState.offerDetail &&\n        cpState.offerDetail.offer_detail &&\n        cpState.offerDetail.offer_detail.plan &&\n        cpState.offerDetail.offer_detail.plan.product &&\n        cpState.offerDetail.offer_detail.plan.product.default_gateway\n    ) {\n        gatewayFound = cpState.offerDetail.offer_detail.plan.product.default_gateway;\n        logThisState(\"isStripePaymentSelected: gatewayFound --- Btest: \", gatewayFound);\n    } else {\n        logError(\"Could not read gatewayFound --- Btest \", cpState.offerDetail.offer_detail.plan.product.default_gateway);\n    }\n\n    const stripeFound = ((gatewayFound == 2) || (gatewayFound == 3))\n    logThisState(\"isStripePaymentSelected: stripeFound: \", stripeFound);\n    logThisState(\"isStripePaymentSelected: gatewayFound: \", gatewayFound);\n\n    return stripeFound;\n}\n\nfunction getLocalizedText(lang: string, messageKey: string): string {\n    if (localizedMessages[lang] && localizedMessages[lang][messageKey]) {\n        return localizedMessages[lang][messageKey];\n    } else {\n        console.warn(`The key \"${messageKey}\" does not exist in the language \"${lang}\"`);\n        return '';\n    }\n}\n\nfunction outputLocalizedText(selector: string, messageKey: string, lang: string = currentLanguage): void {\n    $(selector).text(getLocalizedText(lang, messageKey));\n}\n\n\n\n",
        "role": "system"
    }
]