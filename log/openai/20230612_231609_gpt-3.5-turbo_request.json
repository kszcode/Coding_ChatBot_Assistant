[
    {
        "content": "I want this script to prompt the user with German language.\nFind all relevant texts.\n\nAs a positive example consider:\n$email.after(`<label id=\"email-error\" class=\"error\" for=\"email\">Please enter a valid email address</label>`); .\n\nThis is one of the instructions that I want you to extract.\n\nPlease exclude all logging statements. For example:\nlogThisState(\"inlineCP:submitHandler: startCheckout\");\nthis is a negative example because this is only for logging and logging is OK to be in English.\n\nNow please extract all instructions that could show the user english text.",
        "role": "user"
    },
    {
        "content": "As a JavaScript Code Virtuoso:\n- If the user provides instructions:\n- Ask for clarification if instructions are unclear.\n- Otherwise, write JavaScript code following user instructions.\n- Preserve or improve any comments in the code.\n- Follow JavaScript's best practices and coding standards.\n- Provide explanations of the code if the user asks.\n- If the user provides a code scratchpad:\n- If it's blank, wait for the user's request to write code.\n- If it contains code, use your best judgment to decide whether to modify the existing code or use it as reference.\n\nCoding scratchpad:\n```typescript\n\n/**\n * Check if there is valid subscription\n * - if there is and it's digital, then show and exit\n * - if there is not then call the handler function which can be:\n *      -  await purchaseSubscription();\n *      or it is\n *      -  await checkExistingPayment();\n *\n * @param {string} email\n * @param {function} callback  is called if there is no valid subscription\n */\nexport async function checkExistingSubs(email: string, callback: () => Promise<void>) {\n    try {\n\n        logThisState(\"checkExistingSubs: for email\", email);\n        const resSubsInfo = await subscriptionAPIs.getExistingSubsInfo(email);\n        logThisState(\"checkExistingSubs: got existingSubsInfo\", resSubsInfo);\n        let hasExistingSubscription = resSubsInfo && resSubsInfo.data && resSubsInfo.data.product_id;\n        if (hasExistingSubscription) {\n            cpState.customerData.customer_id = resSubsInfo.data.customer_id;\n            logThisState(\"checkExistingSubs: found customer_id\", cpState.customerData.customer_id);\n        }\n        if (cpState.customerData.forced_invalid_subscription) {\n            hasExistingSubscription = false;\n        }\n\n        if (!hasExistingSubscription) {\n            if (typeof callback == 'function') {\n                logThisState(\"checkExistingSubs: has no valid Data Subscription, or simulated:\", cpState.customerData.forced_invalid_subscription);\n                callback();\n            }\n            return;\n        }\n        const subs_type = resSubsInfo.data.product_id;\n        logThisState(\"checkExistingSubs: has existingSubInfo with subscription_type\", subs_type);\n        const subs_status = ('' + resSubsInfo.data.subscription_status).toLowerCase();\n\n        if (digital_prod_id.includes(cpState.offerDetail.offer_detail.plan.product.id)) {\n            if (subs_status === \"active\"\n                && (digital_prod_id.includes(subs_type))) {\n                logThisState(\"checkExistingSubs: has active existingSubInfo call handleExistingSubscription\");\n                handleExistingSubscription(subs_type);\n                return;\n            }\n\n\n            if (typeof callback == 'function') {\n                callback();\n            }\n        } else {\n            if (typeof callback == 'function') {\n                callback();\n            }\n        }\n    } catch (e) {\n        console.error(\"checkExistingSubs: e=\", e);\n        if (typeof callback == 'function') {\n            callback();\n        }\n        ga('send', 'event', 'Digital Checkout Page', 'ERROR check existing subs info', JSON.stringify(e));\n    }\n}\n\nexport async function checkExistingPayment() {\n    if (cpState.customerData.forced_invalid_payment) {\n        logThisState(\"checkExistingPayment: forced to set payment to invalid\");\n        return;\n    }\n    if (!cpState.customerData.customer_id) {\n        logThisState(\"checkExistingPayment: does not have an existing customer_id\");\n        return;\n    }\n    try {\n        logThisState(\"checkExistingPayment: for cpState.customerData.customer_id\", cpState.customerData.customer_id);\n        let resPaymentMethod = await subscriptionAPIs.getPaymentMethod();\n        logThisState(\"checkExistingPayment: got payment method\", resPaymentMethod);\n        if (resPaymentMethod && resPaymentMethod.data && !$.isEmptyObject(resPaymentMethod.data)) {\n            logThisState(\"checkExistingPayment: payment method is set, calling handleExistingPayment \" +\n                \"for resPaymentMethod.data.MaskedNumber\", resPaymentMethod.data.MaskedNumber);\n            handleExistingPayment(resPaymentMethod.data.MaskedNumber);\n            cpState.hasExistingPayment = true;\n            logThisState(\"checkExistingPayment: cpState.hasExistingPayment is set\");\n            cpState.customerData.customer_id = resPaymentMethod.data.CustomerID;\n            logThisState(\"checkExistingPayment: set customer ID cpState.customerData.customer_id\", cpState.customerData.customer_id);\n        }\n    } catch (error) {\n        logThisState(\"checkExistingPayment: got error\", error);\n        ga('send', 'event', 'Digital Checkout Page', 'ERROR check existing payment information', JSON.stringify(error));\n    }\n}\n\n//\n```",
        "role": "system"
    }
]