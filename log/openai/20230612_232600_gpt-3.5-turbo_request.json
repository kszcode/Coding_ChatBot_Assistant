[
    {
        "content": "I want this script to prompt the user with German language.\nFind all relevant texts.\n\nAs a positive example consider:\n$email.after(`<label id=\"email-error\" class=\"error\" for=\"email\">Please enter a valid email address</label>`); .\n\nThis is one of the instructions that I want you to extract.\n\nPlease exclude the following functions: logThisState(), outputLocalizedText(), ga(), window.epSubs.track*()\nthese are negative examples because they are used for logging which is OK to be in English.\n\nNow please extract all instructions that could show the user english text.",
        "role": "user"
    },
    {
        "content": "As a JavaScript Code Virtuoso:\n- If the user provides instructions:\n- Ask for clarification if instructions are unclear.\n- Otherwise, write JavaScript code following user instructions.\n- Preserve or improve any comments in the code.\n- Follow JavaScript's best practices and coding standards.\n- Provide explanations of the code if the user asks.\n- If the user provides a code scratchpad:\n- If it's blank, wait for the user's request to write code.\n- If it contains code, use your best judgment to decide whether to modify the existing code or use it as reference.\n\nCoding scratchpad:\n```typescript\n\n\n\n/**\n * @param returnUrlFor3DS\n * sample: https://hooks.stripe.com/3d_secure_2/hosted?merchant=acct_1HpXGBBkvvoYiDHG&publishable_key=pk_test_...\n */\nfunction create3DSecureIframe(\n    returnUrlFor3DS: string\n): Promise<string> {\n    const timeout = 30 * 60 * 1000;\n    logThisState(\"create3DSecureIframe: called, returnUrlFor3DS=\", returnUrlFor3DS);\n    return new Promise((resolve, reject) => {\n        const iframe = document.createElement('iframe');\n        iframe.src = returnUrlFor3DS;\n        iframe.id = 'stripe-3ds-iframe-fullscreen';\n        iframe.style.cssText = `position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: 9999; border: none`;\n        document.body.appendChild(iframe);\n\n        const timer = setTimeout(() => {\n            removeIframeAndListener();\n            handleError(new Error('3D Secure authentication timed out.'));\n        }, timeout);\n\n        window.addEventListener('message', messageHandler);\n\n        function messageHandler(event: MessageEvent) {\n            try {\n                logThisState(\"messageHandler: message from Stripe received, event=\", JSON.stringify(event));\n\n                const allowedOrigins = [\n                    \"https://hooks.stripe.com\",\n                    \"https://testmode-acs.stripe.com\",\n                    \"https://ds-etd-static.test\",\n                    \"https://static.epochtimes.de\",\n                ];\n                if (!allowedOrigins.includes(event.origin)) {\n                    logThisState(\"messageHandler: message from Stripe received, but origin is not expected\" +\n                        \" expectedOrigins: \" + JSON.stringify(allowedOrigins) +\n                        \" eventOrigin: \" + event.origin);\n                    return;\n                }\n\n                if (!event) return;\n                const eventData = event.data;\n                logThisState(\"messageHandler: message from Stripe received, event.data=\", eventData);\n                if (!eventData) return;\n                if (!(\"\" + eventData).startsWith(\"subscriptionJsonData=\")) return;\n\n                const subscriptionJsonData = (\"\" + eventData).replace(\"subscriptionJsonData=\", \"\");\n                logThisState(\"messageHandler: message from Stripe received, subscriptionJsonData=\", subscriptionJsonData);\n                if (subscriptionJsonData === \"rejected\") {\n                    removeIframeAndListener();\n                    handleError(new Error('Payment failed.'));\n                }\n\n                const subscriptionJsonDataObj = JSON.parse(subscriptionJsonData);\n                logThisState(\"messageHandler: message from Stripe received, subscriptionJsonDataObj=\", subscriptionJsonDataObj);\n                clearTimeout(timer);\n                logThisState(\"messageHandler: clearTimeout called to remove the timer\");\n                removeIframeAndListener();\n                logThisState(\"messageHandler: removeIframeAndListener called to remove the iframe and listener\");\n\n                resolve(subscriptionJsonDataObj);\n\n\n            } catch (error) {\n                logThisState(\"messageHandler: error=\", error);\n                handleError(new Error(`3D Secure authentication failed or was canceled. Status: ${event}`));\n                return;\n            }\n        }\n\n        function removeIframeAndListener() {\n            logThisState(\"messageHandler: removeIframeAndListener\");\n            window.removeEventListener('message', messageHandler);\n            document.body.removeChild(iframe);\n        }\n\n        function handleError(error: Error) {\n            logThisState(\"messageHandler: handleError called, error=\", error);\n            reject(error);\n        }\n    });\n}\n\nasync function purchaseForExistingCustomer() {\n    logThisState(\"purchaseForExistingCustomer: is called!\");\n    try {\n        cpState.existingSubData = await subscriptionAPIs.createSubsForExistingCustomer();\n        logThisState(\"purchaseForExistingCustomer subscriptionAPIs.createSubsForExistingCustomer() result:\", cpState.existingSubData);\n\n        showSuccessPopup(false);\n        try {\n            let planData = cpState.selectedPlanDescription.planId;\n            planData += (window.epCheckoutParams.cf_plan_after_trial_ends) ? \"--\" + window.epCheckoutParams.cf_plan_after_trial_ends : \"\";\n            let conversionEvent = \"Conversion Digital Paid Subscription\";\n            if (cpState.selectedPlanDescription.planType === \"video\") {\n                conversionEvent = \"Conversion Video Paid Subscription\";\n            }\n            window.epSubs.trackDataEvent(\n                {\n                    abtest_id: $.cookie('digital_subscription_tracking_abtest_id') || \"\",\n                    user_id: $.cookie('epoch_user_id'),\n                    category: conversionEvent,\n                    action: planData,\n                    label: \"\",\n                    \"src_cat\": window.epCheckoutParams.src_cat,\n                    \"src_tmp\": window.epCheckoutParams.src_tmp,\n                    \"src_url\": window.epCheckoutParams.src_url,\n                    \"src_cmp\": window.epCheckoutParams.src_cmp,\n                    metadata: window.checkoutEngineVersion,\n                    real_url: window.epCheckoutParams.src_url,\n                    canonical_url: window.epCheckoutParams.src_url,\n                    page: window.epCheckoutParams.src_url,\n                    json_data: JSON.stringify({\n                        subsData: cpState.existingSubData,\n                        params: window.epCheckoutParams,\n\n                    }),\n                }\n            );\n            window.epSubs.trackGAEvent(\n                \"paywall:Conversion Paid Subscription\",\n                planData,\n                cpState.existingSubData.subscription_key,\n            );\n            window.epSubs.trackGAEvent(\n                \"paywall:Checkout Process\",\n                \"Checkout Success\",\n            );\n            window.epSubs.trackGAPageview(\n                \"/virtual/goals/paid-subscription/\" + planData + \"/\" + cpState.existingSubData.subscription_key,\n            );\n        } catch (e) {\n        }\n    } catch (response) {\n        $('.loading-throbber-wrapper').hide();\n        $('#purchase-btn').show();\n        $('#checkout-form').find(':input[type=submit]').prop('disabled', false);\n\n        outputLocalizedText('.existing-subscription-create-error', 'checkoutErrorLogoutOrContact');\n        ga('send', 'event', 'Digital Checkout Page', 'errlog:purchaseSubscriptionExistingCustomer', JSON.stringify(response));\n    }\n}\n\nfunction showSuccessPopup(newUserToken: string | boolean) {\n\n\n    if (window.callbackCheckoutSuccess && window.callbackCheckoutSuccess.length > 0) {\n        for (let idx in window.callbackCheckoutSuccess) {\n            if (typeof window.callbackCheckoutSuccess[idx] == \"function\") {\n                try {\n                    window.callbackCheckoutSuccess[idx]();\n                } catch (e) {\n                }\n            }\n        }\n    }\n\n\n    let $successPopup = $('#successPopup');\n    $successPopup.appendTo('body');\n    $('.loading-throbber-wrapper').hide();\n    $('#purchase-btn').show();\n    $successPopup.modal('show');\n    setCookie('epoch_subscribed', cpState.selectedPlanDescription.planId, 1);\n    $('#continue-reading, .continue-reading').on('click',\n        function (e) {\n            continueReadingRedirect();\n        });\n    trackReferralInfo();\n\n    logThisState(\"showSuccessPopup: newUserToken=\", newUserToken);\n    logThisState(\"showSuccessPopup: cpState.customerData.token=\", cpState.customerData.token);\n    logThisState(\"showSuccessPopup: cpState.isLoggedIn=\", cpState.isLoggedIn);\n    logThisState(\"showSuccessPopup: cpState=\", cpState);\n\n    if (cpState.isLoggedIn || !newUserToken) {\n        let $setpw = $('#setpw-form #ymkpassword');\n        $setpw.hide();\n        $setpw.removeAttr('required');\n        $('#setpw-form').on('submit', function (e) {\n            e.preventDefault();\n            handleSurveySubmit(cpState.customerData.token);\n            return false;\n        });\n    } else {\n        $('#ymkpassword').trigger('focus');\n        $('#setpw-form').on('submit', function (e) {\n            e.preventDefault();\n            handlePasswordChange(newUserToken as string);\n            return false;\n        });\n    }\n}\nfunction continueReadingRedirect() {\n    logThisState(\"continueReadingRedirect: called\");\n    if (window.epCheckoutParams.return_url) {\n        let url = window.epCheckoutParams.return_url;\n        if (url.substr(0, 1) === \"/\") {\n            url = \"https://theepochtimes.com\" + url;\n        }\n        window.location.replace(url);\n    } else if (window.extractedURLParams.cf_source_page_url) {\n        let url = decodeURIComponent(window.extractedURLParams.cf_source_page_url);\n        if (url.includes('www.theepochtimes.com')) {\n            if (cpState.selectedPlanDescription.planType === \"video\") {\n                window.location.replace('https://www.theepochtimes.com/epochtv');\n            } else {\n                window.location.replace('https://www.theepochtimes.com/');\n            }\n        } else {\n            window.location.replace('https://www.theepochtimes.com/');\n        }\n    } else {\n        if (cpState.selectedPlanDescription.planType == \"video\") {\n            window.location.replace('https://www.theepochtimes.com/epochtv');\n        } else {\n            window.location.replace('https://www.theepochtimes.com/');\n        }\n    }\n}\nfunction validatePassword(userInput: string) {\n    let requirements = /(?=.{5,32}).*/;\n    return requirements.test(userInput);\n}\nasync function handlePasswordChange(newUserToken: string) {\n    let password = $('#setpw-form #ymkpassword').val(),\n        data = {\n            password: password,\n            confirmpassword: password\n        };\n\n    const form = $('#setpw-form');\n    form.removeClass('was-validated');\n    $(\"#setpw-form input\").each(function () {\n        $(this).removeClass(\"is-invalid\");\n    });\n    if (!validatePassword(($(\"#ymkpassword\", form).val() as string))) {\n        $(\"#ymkpassword\", form).addClass(\"is-invalid\");\n        $(\"#ymkpassword\", form)[0].scrollIntoView();\n        return;\n    }\n\n    try {\n        await subscriptionAPIs.changePassword(data, newUserToken);\n    } catch (error) {\n        ga('send', 'event', 'Digital Checkout Page', 'Unsuccessful password update', error);\n    } finally {\n        handleSurveySubmit(newUserToken);\n    }\n}\n//\n```",
        "role": "system"
    }
]