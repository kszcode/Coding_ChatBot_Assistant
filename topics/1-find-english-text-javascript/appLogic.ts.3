
async function initPaypalExpressPayment() {
    renderPaypal();
    try {
        const expressCheckoutRes = await subscriptionAPIs.setPaypalExpressCheckout('The Epoch Times Digital Subscription');
        const { data } = expressCheckoutRes;
        loadPaypalWindow(data);
    } catch (e) {
    }
}
let paypalWin: Window;
async function renderPaypal() {
    paypalWin = window.open("about:blank", "Paypal Checkout Window", 'width=460, height=650');
    
    $(paypalWin.document.body).ready(function() {
        $(paypalWin.document.body).html(paypalLoadingBody);
    });
}
function loadPaypalWindow(billing_token: string) {
    paypalWin.location.href = window.configPaypalUrl + billing_token;
    $(".paypal-checkout-overlay").show();
    $(".paypal-checkout-continue").click(function(event) {
        event.preventDefault();
        event.stopPropagation();
        paypalWin.focus();
    });
    const pollTimer = setInterval(function () {
        if (paypalWin.closed) {
            window.clearInterval(pollTimer);
            $(".paypal-checkout-overlay").hide();
        }
        try {
            const paypalWinUrl = paypalWin && paypalWin.document && paypalWin.document.URL && paypalWin.document.URL;
            if (paypalWinUrl && paypalWinUrl.includes('token=')) {
                window.clearInterval(pollTimer);
                let params = paypalWinUrl.split('?')[1];
                let queryString = new URLSearchParams(params);
                const pToken = queryString.get('token');
                handlePostPaypalLogin(pToken);
                $(".paypal-checkout-overlay").hide();
                paypalWin.close();
            }
        } catch(e) {
            if (!e.message.includes("Permission denied to access property")) {
            }
        }
    }, 100);
}
async function handlePostPaypalLogin(token: string) {
    try {
        const { data } = await subscriptionAPIs.createBillingAgreement(token);
        cpState.paypalPayload.nonce = data;
        const billingAgreementDetails = await subscriptionAPIs.getBillingAgreementDetails(token);
        cpState.paypalPayload.details = billingAgreementDetails.data;
        startCheckout();
    } catch (e) {
        console.error(e);
    }
}
function extractFormData(formElement = '#checkout-form') {
    let formArray = $(formElement).serializeArray();
    let data: any = {};
    formArray.forEach((obj) => {
        let name = obj.name;
        data[name] = obj.value;
    });
    cpState.inputData = data;
}
async function startCheckout() {
    logThisState("startCheckout: called");

    let $purchase = $('#purchase-btn');
    $purchase.attr('disabled', 'disabled');
    let $loading = $('.loading-throbber-wrapper');
    $loading.fadeIn('fast');

    let $subscription = $('.subscription-create-error');
    $subscription.text('');
    extractFormData('#checkout-form');
    logThisState("startCheckout: extracted form data cpState.inputData", cpState.inputData);
    logThisState("startCheckout: checking cpState.isLoggedIn", cpState.isLoggedIn);
    logThisState("startCheckout: checking cpState.hasExistingPayment", cpState.hasExistingPayment);
    try {
        let hasExistingPayment = cpState.isLoggedIn && cpState.hasExistingPayment;
        let hostedFieldIntegration = !$('#payment-using-hosted-field-integration').is(":visible");
        if (hasExistingPayment && hostedFieldIntegration) {
            logThisState("startCheckout: calling purchaseForExistingCustomer");
            await purchaseForExistingCustomer();
        } else {
            logThisState("startCheckout: calling completePurchase");
            await completePurchase();
        }
    } catch (e) {
        logThisState("startCheckout: error received e", e);

        $loading.hide();
        $purchase.removeAttr('disabled');
        $('#checkout-form').find(':input[type=submit]').prop('disabled', false);
        ga('send', 'event', 'Digital Checkout Page', 'ERROR - completePurchase');
        ga('send', 'event', 'Digital Checkout Page - Error Log', 'checkoutpage:completePurchase', e.message);
        $subscription.text('Unable to create subscription, please try again later.');
    }
}
async function completePurchase() {

    let inputData = cpState.inputData;
    let email = cpState.inputData.email || cpState.customerData.email;

    cpState.checkoutData.customer = {
        "first_name": inputData.customer_fname,
        "last_name": inputData.customer_lname,
        "email": email,
    };
    cpState.checkoutData.offer_id = cpState.offerDetail.offer_id;
    cpState.checkoutData.plan = {"id": cpState.offerDetail.content.plan.id};
    cpState.checkoutData.billing = null;
    cpState.checkoutData.shipping = null;


    if (cpState.paymentType === 'stripe-credit') {
        logThisState("completePurchase: window._cpStripeDict.responsePayload", window._cpStripeDict.responsePayload);
        let stripeResponse = window._cpStripeDict.responsePayload || {};
        let stripeDetails = stripeResponse.card;
        cpState.checkoutData.payment = {
            "nonce": stripeResponse.id,
            "card_type": stripeDetails.brand.replace(/^\w/, (c: string) => c.toUpperCase()),
            "payment_type": 'CreditCard',
            "last4_digits": stripeDetails.last4,
            "expiration_year": stripeDetails.exp_year.toString(),
            "expiration_month": stripeDetails.exp_month.toString(),
            "zip_code": stripeResponse.billing_details.address.postal_code,
            "gateway": window.configForcePaymentGateway ?
                window.configForcePaymentGateway : cpState.offerDetail.offer_detail.plan.product.default_gateway
        };
    } else if (cpState.paymentType === 'stripe-sepa-payment') {
        logThisState("completePurchase: window._cpStripeDict.sepaResponsePayload",
            window._cpStripeDict.sepaResponsePayload);

        let stripeResponse = (window._cpStripeDict
            && window._cpStripeDict.sepaResponsePayload
            && window._cpStripeDict.sepaResponsePayload.source) || {};
        let stripeDetails = stripeResponse.sepa_debit || {};

        cpState.checkoutData.payment = {
            "nonce": stripeResponse.id,
            "card_type": stripeResponse.type,
            "payment_type": 'Sepa_Debit',
            "last4_digits": stripeDetails.last4,
            "gateway": window.configForcePaymentGateway ?
                window.configForcePaymentGateway : cpState.offerDetail.offer_detail.plan.product.default_gateway
        }
    } else if (cpState.paymentType === 'paypal') {
        let payload = cpState.paypalPayload;
        cpState.checkoutData.payment = {
            'payment_type': 'PayPalExpress',
            'nonce': payload.nonce,
            'email': payload.details.EMAIL[0],
            'gateway': window.configForcePaymentGateway ?
                window.configForcePaymentGateway : cpState.offerDetail.offer_detail.plan.product.default_gateway,
            'first_name': payload.details.FIRSTNAME[0],
            'last_name': payload.details.LASTNAME[0],
            'make_primary': true
        }
    }

    logThisState("completePurchase: calling checkExistingPayment, cpState.checkoutData=", cpState.checkoutData);
    await checkExistingSubs(email, async function () {
        logThisState("completePurchase: calling purchaseSubscription");
        await purchaseSubscription();
    });
    logThisState("completePurchase: finished");
}
/**
 * calls create subscription API using the cpState.recaptchaToken
 * ??? where was cpState.recaptchaToken  set
 * ??? isn't that for only single use
 */
async function purchaseSubscription() {
    logThisState("purchaseSubscription: Called with cpState.recaptchaToken", cpState.recaptchaToken);
    try {
        let response = await subscriptionAPIs.createSubscriptionUsingOfferAndCreditCard(cpState.recaptchaToken);
        logThisState("purchaseSubscription: createSubscriptionUsingOfferAndCreditCard called response=", response);


        if (response && response.data && response.data.return_url_for_3ds) {
            logThisState("purchaseSubscription: calling create3DSecureIframe, url=", response.data.return_url_for_3ds);
            response = await create3DSecureIframe(response.data.return_url_for_3ds);
            logThisState("purchaseSubscription: create3DSecureIframe called, new response2=", response);
        }


        cpState.newSubData = response.data;
        logThisState("purchaseSubscription: window.newSubsData is set", JSON.stringify(response));

        if (response && response.data && response.data.token) {
            logThisState("purchaseSubscription: found token in new subscription");
            showSuccessPopup(response.data.token);

            if (!response.data.sessionid) {
                response.data.sessionid = response.data.session_id;
            }
            if (!response.data.sessionid) {
                response.data.sessionid = window.epSubs.getAllUrlParams().sessionid;
            }
            if (!response.data.sessionid) {
                response.data.sessionid = "set-forcefully-in-purchaseSubscription-DE-202305";
            }
            window.ep.pipaId.refreshCookies(response.data);

        } else {
            logThisState("purchaseSubscription: there is no token in new subscription, " +
                "OPTIONAL consider if this returned error for some reason");
            showSuccessPopup(false);
        }

        let planData = cpState.selectedPlanDescription.planId;
        planData += (window.epCheckoutParams.cf_plan_after_trial_ends) ? "--" + window.epCheckoutParams.cf_plan_after_trial_ends : "";
        let safeData = cpState.checkoutData;
        safeData.card = "hidden";
        let conversionEvent = "Conversion Digital Paid Subscription";
        if (cpState.selectedPlanDescription.planType === "video") {
            conversionEvent = "Conversion Video Paid Subscription";
        }
        window.epSubs.trackDataEvent(
            {
                abtest_id: $.cookie('digital_subscription_tracking_abtest_id') || "",
                user_id: $.cookie('epoch_user_id'),
                category: conversionEvent,
                action: planData,
                label: cpState.newSubData.subscription_key,
                "src_cat": window.epCheckoutParams.src_cat,
                "src_tmp": window.epCheckoutParams.src_tmp,
                "src_url": window.epCheckoutParams.src_url,
                "src_cmp": window.epCheckoutParams.src_cmp,
                metadata: window.checkoutEngineVersion,
                page: window.location.href,
                real_url: window.epCheckoutParams.src_url,
                canonical_url: window.epCheckoutParams.src_url,
                value: cpState.offerDetail.offer_detail.plan.price,
                json_data: JSON.stringify({
                    subsData: cpState.newSubData,
                    params: window.epCheckoutParams,
                    checkoutData: safeData,
                    email: safeData.customer.email,
                }),
            }
        );
        window.epSubs.trackGAEvent(
            "paywall:Conversion Paid Subscription",
            planData,
            cpState.newSubData.subscription_key,
        );
        window.epSubs.trackGAEvent(
            "paywall:Checkout Process",
            "Checkout Success",
        );
        window.epSubs.trackGAPageview(
            "/virtual/goals/paid-subscription/" + planData + "/" + cpState.newSubData.subscription_key,
        );
    } catch (err) {
        logThisState("purchaseSubscription: caught an error", err);
        $('.loading-throbber-wrapper').hide();
        $('#purchase-btn').show();
        $('#checkout-form').find(':input[type=submit]').prop('disabled', false);
        let res = err.responseText,
            statusText = err.statusText,
            errorMsgKey = '';
        if (statusText && statusText === "Bad Gateway") {
            outputLocalizedText('.subscription-create-error', 'checkoutError');
            ga('send', 'event', 'Digital Checkout Page', 'errlog:purchaseSubscription', 'Unable to checkout, please verify that your payment details are correct.');
        } else if (res) {
            if (res.includes('AVS check failed')) {
                errorMsgKey = 'subscriptionPurchaseError';
            } else if (res.includes('Prepaid cards are not supported')) {
                errorMsgKey = 'prepaidCardError';
            } else {
                errorMsgKey = 'checkoutErrorWithSupport';
            }
            outputLocalizedText('.subscription-create-error', errorMsgKey);
            ga('send', 'event', 'Digital Checkout Page', 'errlog:purchaseSubscription', err.responseText);
        } else {
            outputLocalizedText('.subscription-create-error', 'checkoutError');
            ga('send', 'event', 'Digital Checkout Page', 'errlog:purchaseSubscription', 'Unable to checkout, please verify that your payment details are correct.');
        }
    }
}


//