


/**
 * @param returnUrlFor3DS
 * sample: https://hooks.stripe.com/3d_secure_2/hosted?merchant=acct_1HpXGBBkvvoYiDHG&publishable_key=pk_test_...
 */
function create3DSecureIframe(
    returnUrlFor3DS: string
): Promise<string> {
    const timeout = 30 * 60 * 1000;
    logThisState("create3DSecureIframe: called, returnUrlFor3DS=", returnUrlFor3DS);
    return new Promise((resolve, reject) => {
        const iframe = document.createElement('iframe');
        iframe.src = returnUrlFor3DS;
        iframe.id = 'stripe-3ds-iframe-fullscreen';
        iframe.style.cssText = `position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: 9999; border: none`;
        document.body.appendChild(iframe);

        const timer = setTimeout(() => {
            removeIframeAndListener();
            handleError(new Error('3D Secure authentication timed out.'));
        }, timeout);

        window.addEventListener('message', messageHandler);

        function messageHandler(event: MessageEvent) {
            try {
                logThisState("messageHandler: message from Stripe received, event=", JSON.stringify(event));

                const allowedOrigins = [
                    "https://hooks.stripe.com",
                    "https://testmode-acs.stripe.com",
                    "https://ds-etd-static.test",
                    "https://static.epochtimes.de",
                ];
                if (!allowedOrigins.includes(event.origin)) {
                    logThisState("messageHandler: message from Stripe received, but origin is not expected" +
                        " expectedOrigins: " + JSON.stringify(allowedOrigins) +
                        " eventOrigin: " + event.origin);
                    return;
                }

                if (!event) return;
                const eventData = event.data;
                logThisState("messageHandler: message from Stripe received, event.data=", eventData);
                if (!eventData) return;
                if (!("" + eventData).startsWith("subscriptionJsonData=")) return;

                const subscriptionJsonData = ("" + eventData).replace("subscriptionJsonData=", "");
                logThisState("messageHandler: message from Stripe received, subscriptionJsonData=", subscriptionJsonData);
                if (subscriptionJsonData === "rejected") {
                    removeIframeAndListener();
                    handleError(new Error('Payment failed.'));
                }

                const subscriptionJsonDataObj = JSON.parse(subscriptionJsonData);
                logThisState("messageHandler: message from Stripe received, subscriptionJsonDataObj=", subscriptionJsonDataObj);
                clearTimeout(timer);
                logThisState("messageHandler: clearTimeout called to remove the timer");
                removeIframeAndListener();
                logThisState("messageHandler: removeIframeAndListener called to remove the iframe and listener");

                resolve(subscriptionJsonDataObj);


            } catch (error) {
                logThisState("messageHandler: error=", error);
                handleError(new Error(`3D Secure authentication failed or was canceled. Status: ${event}`));
                return;
            }
        }

        function removeIframeAndListener() {
            logThisState("messageHandler: removeIframeAndListener");
            window.removeEventListener('message', messageHandler);
            document.body.removeChild(iframe);
        }

        function handleError(error: Error) {
            logThisState("messageHandler: handleError called, error=", error);
            reject(error);
        }
    });
}

async function purchaseForExistingCustomer() {
    logThisState("purchaseForExistingCustomer: is called!");
    try {
        cpState.existingSubData = await subscriptionAPIs.createSubsForExistingCustomer();
        logThisState("purchaseForExistingCustomer subscriptionAPIs.createSubsForExistingCustomer() result:", cpState.existingSubData);

        showSuccessPopup(false);
        try {
            let planData = cpState.selectedPlanDescription.planId;
            planData += (window.epCheckoutParams.cf_plan_after_trial_ends) ? "--" + window.epCheckoutParams.cf_plan_after_trial_ends : "";
            let conversionEvent = "Conversion Digital Paid Subscription";
            if (cpState.selectedPlanDescription.planType === "video") {
                conversionEvent = "Conversion Video Paid Subscription";
            }
            window.epSubs.trackDataEvent(
                {
                    abtest_id: $.cookie('digital_subscription_tracking_abtest_id') || "",
                    user_id: $.cookie('epoch_user_id'),
                    category: conversionEvent,
                    action: planData,
                    label: "",
                    "src_cat": window.epCheckoutParams.src_cat,
                    "src_tmp": window.epCheckoutParams.src_tmp,
                    "src_url": window.epCheckoutParams.src_url,
                    "src_cmp": window.epCheckoutParams.src_cmp,
                    metadata: window.checkoutEngineVersion,
                    real_url: window.epCheckoutParams.src_url,
                    canonical_url: window.epCheckoutParams.src_url,
                    page: window.epCheckoutParams.src_url,
                    json_data: JSON.stringify({
                        subsData: cpState.existingSubData,
                        params: window.epCheckoutParams,

                    }),
                }
            );
            window.epSubs.trackGAEvent(
                "paywall:Conversion Paid Subscription",
                planData,
                cpState.existingSubData.subscription_key,
            );
            window.epSubs.trackGAEvent(
                "paywall:Checkout Process",
                "Checkout Success",
            );
            window.epSubs.trackGAPageview(
                "/virtual/goals/paid-subscription/" + planData + "/" + cpState.existingSubData.subscription_key,
            );
        } catch (e) {
        }
    } catch (response) {
        $('.loading-throbber-wrapper').hide();
        $('#purchase-btn').show();
        $('#checkout-form').find(':input[type=submit]').prop('disabled', false);

        outputLocalizedText('.existing-subscription-create-error', 'checkoutErrorLogoutOrContact');
        ga('send', 'event', 'Digital Checkout Page', 'errlog:purchaseSubscriptionExistingCustomer', JSON.stringify(response));
    }
}

function showSuccessPopup(newUserToken: string | boolean) {


    if (window.callbackCheckoutSuccess && window.callbackCheckoutSuccess.length > 0) {
        for (let idx in window.callbackCheckoutSuccess) {
            if (typeof window.callbackCheckoutSuccess[idx] == "function") {
                try {
                    window.callbackCheckoutSuccess[idx]();
                } catch (e) {
                }
            }
        }
    }


    let $successPopup = $('#successPopup');
    $successPopup.appendTo('body');
    $('.loading-throbber-wrapper').hide();
    $('#purchase-btn').show();
    $successPopup.modal('show');
    setCookie('epoch_subscribed', cpState.selectedPlanDescription.planId, 1);
    $('#continue-reading, .continue-reading').on('click',
        function (e) {
            continueReadingRedirect();
        });
    trackReferralInfo();

    logThisState("showSuccessPopup: newUserToken=", newUserToken);
    logThisState("showSuccessPopup: cpState.customerData.token=", cpState.customerData.token);
    logThisState("showSuccessPopup: cpState.isLoggedIn=", cpState.isLoggedIn);
    logThisState("showSuccessPopup: cpState=", cpState);

    if (cpState.isLoggedIn || !newUserToken) {
        let $setpw = $('#setpw-form #ymkpassword');
        $setpw.hide();
        $setpw.removeAttr('required');
        $('#setpw-form').on('submit', function (e) {
            e.preventDefault();
            handleSurveySubmit(cpState.customerData.token);
            return false;
        });
    } else {
        $('#ymkpassword').trigger('focus');
        $('#setpw-form').on('submit', function (e) {
            e.preventDefault();
            handlePasswordChange(newUserToken as string);
            return false;
        });
    }
}
function continueReadingRedirect() {
    logThisState("continueReadingRedirect: called");
    if (window.epCheckoutParams.return_url) {
        let url = window.epCheckoutParams.return_url;
        if (url.substr(0, 1) === "/") {
            url = "https://theepochtimes.com" + url;
        }
        window.location.replace(url);
    } else if (window.extractedURLParams.cf_source_page_url) {
        let url = decodeURIComponent(window.extractedURLParams.cf_source_page_url);
        if (url.includes('www.theepochtimes.com')) {
            if (cpState.selectedPlanDescription.planType === "video") {
                window.location.replace('https://www.theepochtimes.com/epochtv');
            } else {
                window.location.replace('https://www.theepochtimes.com/');
            }
        } else {
            window.location.replace('https://www.theepochtimes.com/');
        }
    } else {
        if (cpState.selectedPlanDescription.planType == "video") {
            window.location.replace('https://www.theepochtimes.com/epochtv');
        } else {
            window.location.replace('https://www.theepochtimes.com/');
        }
    }
}
function validatePassword(userInput: string) {
    let requirements = /(?=.{5,32}).*/;
    return requirements.test(userInput);
}
async function handlePasswordChange(newUserToken: string) {
    let password = $('#setpw-form #ymkpassword').val(),
        data = {
            password: password,
            confirmpassword: password
        };

    const form = $('#setpw-form');
    form.removeClass('was-validated');
    $("#setpw-form input").each(function () {
        $(this).removeClass("is-invalid");
    });
    if (!validatePassword(($("#ymkpassword", form).val() as string))) {
        $("#ymkpassword", form).addClass("is-invalid");
        $("#ymkpassword", form)[0].scrollIntoView();
        return;
    }

    try {
        await subscriptionAPIs.changePassword(data, newUserToken);
    } catch (error) {
        ga('send', 'event', 'Digital Checkout Page', 'Unsuccessful password update', error);
    } finally {
        handleSurveySubmit(newUserToken);
    }
}
//