
async function initializeStripePaymentForSepa() {
    logThisState("initializeStripePaymentForSepa: called");
    cpState.paymentType = 'stripe-sepa-payment';
    let stripe: Stripe | null;
    try {
        stripe = await loadStripe(getStripeKey());
        logThisState("initializeStripePaymentForSepa: Stripe loaded successfully");
    } catch (e) {


        logError("Stripe load error, load braintree instead.", e);
        alert('STRIPE LOAD ERROR!');
        return;
    }

    const elements = stripe.elements();

    const iban = elements.create('iban', {
        style: {
            base: {
                fontSize: '16px',
            },
        },
        supportedCountries: ['SEPA'],
    });

    iban.mount('#iban-element');
    window._cpStripeDict.callStripeSepaSubmitHandler = () => {
        logThisState('callStripeSepaSubmitHandler is called');
        callSepaCreateForStripe(stripe, iban);
    }
    async function callSepaCreateForStripe(stripe: Stripe, iban: StripeIbanElement) {
        extractFormData('#checkout-form');
        logThisState("callSepaCreateForStripe: cpState.inputData", cpState.inputData);
        let $loading = $('.loading-throbber-wrapper');
        try {
            const stripeSepaPayload = {
                type: 'sepa_debit',
                currency: 'eur',

                owner: {
                    name: cpState.inputData.customer_fname + ' ' + cpState.inputData.customer_lname,
                    email: cpState.inputData.email,
                }
            };
            logThisState("callSepaCreateForStripe: stripeSepaPayload", JSON.stringify(stripeSepaPayload));
            const result = await stripe.createSource(iban, stripeSepaPayload);

            if (result.error) {
                throw new Error(result.error.message);
            }

            logThisState("initializeStripePaymentForSepa:stripe.createSource: " +
                "result: ", result);


            window._cpStripeDict.sepaResponsePayload = result;
            await startCheckout();
        } catch (e) {
            logThisState("initializeStripePaymentForSepa:stripe.createSource:error ", {err: e});
            $loading.fadeOut('fast');
            $('#purchase-btn').prop('disabled', false);
            outputLocalizedText('.error-holder .error', 'checkoutError');
        }
    }
}
async function initializeStripePaymentForCreditCard() {
    logThisState("initializeStripePaymentForCreditCard: called");
    cpState.paymentType = 'stripe-credit';
    let stripe: Stripe | null;
    try {
        stripe = await loadStripe(getStripeKey());
        logThisState("initializeStripePaymentForCreditCard: Stripe loaded successfully");
    } catch (e) {


        logError("Stripe load error, load braintree instead.", e);
        alert('STRIPE LOAD ERROR!');
        return;
    }
    const appearance: Appearance = {
        theme: 'none'
    };
    const elements = stripe.elements({appearance: appearance});
    const styles = {
        base: {
            fontSize: '16pt',
            color: '#3A3A3A',
            '::placeholder': {
                color: '#a9a9a9'
            },
            '::-webkit-input-placeholder': {
                color: '#a9a9a9'
            },
            ':-moz-placeholder': {
                color: '#a9a9a9'
            },
            '::-moz-placeholder': {
                color: '#a9a9a9'
            },
            ':-ms-input-placeholder ': {
                color: '#a9a9a9'
            },
        },
        invalid: {
            color: '#E25950',
        },
        valid: {
            color: 'green'
        }
    }
    const cardNumberElement = elements.create("cardNumber", {style: styles});
    const cardExpiryElement = elements.create("cardExpiry", {style: styles});
    const cardCvvElement = elements.create("cardCvc", {style: styles});
    cardNumberElement.mount("#stripe-card-number");
    cardExpiryElement.mount("#stripe-expiration-date");
    cardCvvElement.mount("#stripe-cvv");
    window._cpStripeDict.callStripeCCSubmitHandler = () => {
        logThisState('callStripeCCSubmitHandler is called with');
        stripeSubmitCreditCardHandler(stripe, cardNumberElement);
    }
    async function stripeSubmitCreditCardHandler(stripe: Stripe, cardNumberElement: StripeCardNumberElement) {
        let $loading = $('.loading-throbber-wrapper');
        try {
            $loading.fadeIn('fast');
            logThisState('cpState:', cpState);
            const billing_zip = $("#billing-zip").val();
            const res = await stripe.createPaymentMethod({
                type: 'card',
                card: cardNumberElement,
                billing_details: {
                    address: {
                        postal_code: (billing_zip as string)
                    }
                }
            });
            if (res && res.error) {
                throw new Error(res.error.message);
            }
            logThisState("window._cpStripeDict.responsePayload is set:", res.paymentMethod);
            window._cpStripeDict.responsePayload = res.paymentMethod;
            await startCheckout();
        } catch (e) {
            $loading.fadeOut('fast');
            $('#purchase-btn').prop('disabled', false);
            outputLocalizedText('.error-holder .error', 'checkoutError');
            logThisState("Stripe error response payload", {err: e});
        }
    }
}
//