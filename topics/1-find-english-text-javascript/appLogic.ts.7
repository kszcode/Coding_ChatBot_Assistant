

    createSubsForExistingCustomer: function () {
        let subData = {
            plan_id: cpState.selectedPlanDescription.planId,
            meta_data: cpState.checkoutData.meta_data,





        }
        if (window.epCheckoutParams.plan_quantity) {
            cpState.checkoutData.plan_quantity = window.epCheckoutParams.plan_quantity;
        }
        const hostName = window.location.hostname;
        let apiUrl = `${this.conductorHostUrl}create_subscription_for_customer`;
        apiUrl += `?site_id=${this.siteID}`;
        apiUrl += `&hostName=${hostName}`;
        apiUrl += `&token=${cpState.customerData.token}`;
        if (cpState.customerData.customer_id) {
            apiUrl = `${apiUrl}&customerid=${cpState.customerData.customer_id}`;
        }
        logThisState("createSubsForExistingCustomer: apiUrl", apiUrl);
        logThisState("createSubsForExistingCustomer: subData", apiUrl);

        return $.ajax({
            method: "POST",
            dataType: "json",
            contentType: "application/json",
            url: apiUrl,
            data: JSON.stringify(subData),
            success: function (res) {
                ga('send', 'event', 'Digital Checkout Page', 'SUCCESS - purchaseSubscription for existing customer');
            },
            error: function (res) {
                ga('send', 'event', 'Digital Checkout Page', 'ERROR - purchaseSubscription for existing customer');
                try {
                    window.epSubs.trackDataEvent({
                        "abtest_id": ($ as any).cookie('digital_subscription_tracking_abtest_id') || "",
                        "user_id": ($ as any).cookie('epoch_user_id'),
                        "category": 'ERROR Digital Subscription Checkout',
                        "action": 'createSubsForExistingCustomer error response',
                        "label": '',
                        "src_cat": window.epCheckoutParams.src_cat,
                        "src_tmp": window.epCheckoutParams.src_tmp,
                        "src_url": window.epCheckoutParams.src_url,
                        "src_cmp": window.epCheckoutParams.src_cmp,
                        "value": '',
                        metadata: window.checkoutEngineVersion,
                        "page": window.location.href,
                        "canonical_url": window.epCheckoutParams.src_url,
                        "real_url": window.epCheckoutParams.src_url,
                        "json_data": JSON.stringify({
                            params: window.epCheckoutParams,
                            checkoutEngineVersion: window.checkoutEngineVersion,
                            response: res,
                            checkoutData: cpState.checkoutData
                        })
                    });
                } catch (e) {
                }
            }
        });
    },
    setPaypalExpressCheckout: function (description: string) {
        const isDev = true;
        const currentUrl = encodeURIComponent(window.location.href)
        const paypalParams = `&return_url=${currentUrl}&cancel_url=${encodeURIComponent('https://www.epochtimes.de')}&amount=${cpState.selectedPlanDescription.planPrice}&description=${encodeURIComponent(description)}&noshipping=true`;
        const siteId = isDev ? 'de-dev.theepochtimes.com' : this.siteID;
        return $.ajax({
            method: "POST",
            dataType: "json",
            contentType: "application/json",
            url: `${this.conductorHostUrl}paypal_express/set_express_checkout?siteId=${siteId}${paypalParams}`,
            data: {}
        });
    },
    createBillingAgreement: function (token: string) {
        const isDev = true;
        const siteId = isDev ? 'de-dev.theepochtimes.com' : this.siteID;
        return $.ajax({
            method: "POST",
            dataType: "json",
            contentType: "application/json",
            url: `${this.conductorHostUrl}paypal_express/create_billing_agreement?siteId=${siteId}&token=${token}`
        });
    },
    getBillingAgreementDetails: function (token: string) {
        const isDev = true;
        const siteId = isDev ? 'de-dev.theepochtimes.com' : this.siteID;
        return $.ajax({
            method: "GET",
            dataType: "json",
            contentType: "application/json",
            url: `${this.conductorHostUrl}paypal_express/get_express_checkout_detail?siteId=${siteId}&token=${token}`
        });
    }
}

/**
 * call add_abandoned_cart_email with tracking information
 *
 * @param {string} email
 * @returns
 */
function addToAbandonedCartJourney(email: string) {

    if (($ as any).cookie('epoch_abandoned_cart_journey')) {
        return;
    }


    setCookie('epoch_abandoned_cart_journey', true, 6);


    let segments = ['A', 'B', 'C', 'D'];
    let segment = segments[Math.floor(Math.random() * segments.length)];
    let planData = cpState.selectedPlanDescription.plan_id;
    planData += (cpState.selectedPlanDescription.cf_plan_after_trial_ends) ? "---" + cpState.selectedPlanDescription.cf_plan_after_trial_ends : "";

    let acData = {
        email: email,
        user_id: ($ as any).cookie("epoch_user_id"),
        cp_type: (cpState.selectedPlanDescription.planType) ? cpState.selectedPlanDescription.planType : "digital",
        url: window.location.href,
        action: planData,
        metadata: "",
        segment: segment
    }
    try {
        logThisState("addToAbandonedCartJourney: try to validate recaptcha");
        grecaptcha.ready(function () {
            grecaptcha.execute('6LcmJLkZAAAAAMziOnaFrJkOV4ClF_H8OvcqvlyE', {action: 'ac_email'}).then(function (captchaACtoken) {
                try {
                    let url = window.configSubsApiUrl + "/add_abandoned_cart_email?recaptcha=" + encodeURIComponent(captchaACtoken);
                    logThisState("addToAbandonedCartJourney: recaptcha successful");
                    logThisState("addToAbandonedCartJourney: call url", url);
                    logThisState("addToAbandonedCartJourney: with data", acData);
                    $.ajax({
                        type: "POST",
                        dataType: "json",
                        contentType: "application/json",
                        url: url,
                        data: JSON.stringify(acData),
                        success: function (response) {
                            window.epSubs.trackDataEvent({
                                "user_id": ($ as any).cookie('epoch_user_id') || "",
                                "category": 'Added to Digital Abandoned Cart Journey',
                                "action": planData,
                                "label": email,
                                "value": '',
                                "metadata": window.checkoutEngineVersion,
                                "page": window.extractedURLParams.src_url,
                                "canonical_url": window.extractedURLParams.src_url,
                                "real_url": window.extractedURLParams.src_url,
                                "json_data": JSON.stringify({
                                    params: window.extractedURLParams,
                                    checkoutEngineVersion: window.checkoutEngineVersion,
                                    email: email
                                })
                            });
                        },
                        error: function (response) {
                            logThisState("addToAbandonedCartJourney: error L593, email=" + email + " response=",
                                response
                            );
                        }
                    });
                } catch (e) {
                    logThisState("addToAbandonedCartJourney: error L602, exception=", e);
                }
            });
        });
    } catch (e) {
        logThisState("addToAbandonedCartJourney: error L607, exception=", e);
    }
}
function getCookie(key: string) {
    const result = ($ as any).cookie(key);
    logThisState("getCookie: key=" + key + ' result=', result);
    return result;
}
/**
 * Note: this sets the cookie on the domain and subdomain of theepochtimes.com
 * Warning: it will not work for local testing
 *
 * @param {string} key
 * @param {object} value
 * @param {int} expires in days
 * @returns
 */
export function setCookie(key: string, value: boolean, expires: number) {
    if (!($ as any).cookie) {
        return false;
    }

    ($ as any).cookie(key, value, {
        expires: expires,
        domain: 'theepochtimes.com',
        path: '/'
    });
}

function handleExistingPayment(maskedNumber: string) {
    $('#payment-using-hosted-field-integration').slideUp();

    $('#existing-card').slideDown();

    $('#show-braintree-payment').click(function (e) {
        e.preventDefault();
        $('#payment-using-hosted-field-integration').slideDown();
        $('#existing-card').slideUp();
    });
    if (maskedNumber) {
        $('#card-info-line').show();
        $('#last-four').empty().append(maskedNumber);
    }
}
//